.\" Man page generated from reStructuredText.
.
.TH "GENERATIVE-AI-INFERENCE_CHAT-RESULT_CHAT-GENERIC-CHAT-REQUEST" "1" "Apr 23, 2025" "3.54.5" "OCI CLI Command Reference"
.SH NAME
generative-ai-inference_chat-result_chat-generic-chat-request \- 
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.IP \(bu 2
\fI\%Description\fP
.IP \(bu 2
\fI\%Usage\fP
.IP \(bu 2
\fI\%Required Parameters\fP
.IP \(bu 2
\fI\%Optional Parameters\fP
.IP \(bu 2
\fI\%Global Parameters\fP
.IP \(bu 2
\fI\%Example using required parameter\fP
.UNINDENT
.SH DESCRIPTION
.sp
Creates a response for the given conversation.
.SH USAGE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
oci generative\-ai\-inference chat\-result chat\-generic\-chat\-request [OPTIONS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH REQUIRED PARAMETERS
.INDENT 0.0
.TP
.B \-\-compartment\-id, \-c [text]
.UNINDENT
.sp
The OCID of compartment in which to call the Generative AI service to chat.
.INDENT 0.0
.TP
.B \-\-serving\-mode [complex type]
.UNINDENT
.sp
This is a complex type whose value must be valid JSON. The value can be provided as a string on the command line or passed in as a file using
the \fI\%file://path/to/file\fP syntax.
.sp
The \fB\-\-generate\-param\-json\-input\fP option can be used to generate an example of the JSON which must be provided. We recommend storing this example
in a file, modifying it as needed and then passing it back in via the \fI\%file://\fP syntax.
.SH OPTIONAL PARAMETERS
.INDENT 0.0
.TP
.B \-\-chat\-request\-frequency\-penalty [text]
.UNINDENT
.sp
To reduce repetitiveness of generated tokens, this number penalizes new tokens based on their frequency in the generated text so far. Values > 0 encourage the model to use new tokens and values < 0 encourage the model to repeat tokens. Set to 0 to disable.
.INDENT 0.0
.TP
.B \-\-chat\-request\-is\-echo [boolean]
.UNINDENT
.sp
Whether to include the user prompt in the response. Applies only to non\-stream results.
.INDENT 0.0
.TP
.B \-\-chat\-request\-is\-stream [boolean]
.UNINDENT
.sp
Whether to stream back partial progress. If set to true, as tokens become available, they are sent as data\-only server\-sent events.
.INDENT 0.0
.TP
.B \-\-chat\-request\-log\-probs [integer]
.UNINDENT
.sp
Includes the logarithmic probabilities for the most likely output tokens and the chosen tokens.
.sp
For example, if the log probability is 5, the API returns a list of the 5 most likely tokens. The API returns the log probability of the sampled token, so there might be up to logprobs+1 elements in the response.
.INDENT 0.0
.TP
.B \-\-chat\-request\-logit\-bias [complex type]
.UNINDENT
.sp
Modifies the likelihood of specified tokens that appear in the completion.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\(aq{"6395": 2, "8134": 1, "21943": 0.5, "5923": \-100}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is a complex type whose value must be valid JSON. The value can be provided as a string on the command line or passed in as a file using
the \fI\%file://path/to/file\fP syntax.
.sp
The \fB\-\-generate\-param\-json\-input\fP option can be used to generate an example of the JSON which must be provided. We recommend storing this example
in a file, modifying it as needed and then passing it back in via the \fI\%file://\fP syntax.
.INDENT 0.0
.TP
.B \-\-chat\-request\-max\-tokens [integer]
.UNINDENT
.sp
The maximum number of tokens that can be generated per output sequence. The token count of your prompt plus \fImaxTokens\fP must not exceed the model’s context length. Not setting a value for maxTokens results in the possible use of model’s full context length.
.INDENT 0.0
.TP
.B \-\-chat\-request\-messages [complex type]
.UNINDENT
.sp
The series of messages in a chat request. Includes the previous messages in a conversation. Each message includes a role (\fIUSER\fP or the \fICHATBOT\fP) and content.
.sp
This option is a JSON list with items of type Message.  For documentation on Message please see our API reference: \fI\%https://docs.cloud.oracle.com/api/#/en/generativeaiinference/20231130/datatypes/Message\fP\&.
This is a complex type whose value must be valid JSON. The value can be provided as a string on the command line or passed in as a file using
the \fI\%file://path/to/file\fP syntax.
.sp
The \fB\-\-generate\-param\-json\-input\fP option can be used to generate an example of the JSON which must be provided. We recommend storing this example
in a file, modifying it as needed and then passing it back in via the \fI\%file://\fP syntax.
.INDENT 0.0
.TP
.B \-\-chat\-request\-num\-generations [integer]
.UNINDENT
.sp
The number of of generated texts that will be returned.
.INDENT 0.0
.TP
.B \-\-chat\-request\-presence\-penalty [text]
.UNINDENT
.sp
To reduce repetitiveness of generated tokens, this number penalizes new tokens based on whether they’ve appeared in the generated text so far. Values > 0 encourage the model to use new tokens and values < 0 encourage the model to repeat tokens.
.sp
Similar to frequency penalty, a penalty is applied to previously present tokens, except that this penalty is applied equally to all tokens that have already appeared, regardless of how many times they’ve appeared. Set to 0 to disable.
.INDENT 0.0
.TP
.B \-\-chat\-request\-seed [integer]
.UNINDENT
.sp
If specified, the backend will make a best effort to sample tokens deterministically, so that repeated requests with the same seed and parameters yield the same result. However, determinism cannot be fully guaranteed.
.INDENT 0.0
.TP
.B \-\-chat\-request\-stop [complex type]
.UNINDENT
.sp
List of strings that stop the generation if they are generated for the response text. The returned output will not contain the stop strings.
This is a complex type whose value must be valid JSON. The value can be provided as a string on the command line or passed in as a file using
the \fI\%file://path/to/file\fP syntax.
.sp
The \fB\-\-generate\-param\-json\-input\fP option can be used to generate an example of the JSON which must be provided. We recommend storing this example
in a file, modifying it as needed and then passing it back in via the \fI\%file://\fP syntax.
.INDENT 0.0
.TP
.B \-\-chat\-request\-temperature [text]
.UNINDENT
.sp
A number that sets the randomness of the generated output. A lower temperature means a less random generations.
.sp
Use lower numbers for tasks with a correct answer such as question answering or summarizing. High temperatures can generate hallucinations or factually incorrect information. Start with temperatures lower than 1.0 and increase the temperature for more creative outputs, as you regenerate the prompts to refine the outputs.
.INDENT 0.0
.TP
.B \-\-chat\-request\-tool\-choice [complex type]
.UNINDENT
.sp
This is a complex type whose value must be valid JSON. The value can be provided as a string on the command line or passed in as a file using
the \fI\%file://path/to/file\fP syntax.
.sp
The \fB\-\-generate\-param\-json\-input\fP option can be used to generate an example of the JSON which must be provided. We recommend storing this example
in a file, modifying it as needed and then passing it back in via the \fI\%file://\fP syntax.
.INDENT 0.0
.TP
.B \-\-chat\-request\-tools [complex type]
.UNINDENT
.sp
A list of tools the model may call. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
.sp
This option is a JSON list with items of type ToolDefinition.  For documentation on ToolDefinition please see our API reference: \fI\%https://docs.cloud.oracle.com/api/#/en/generativeaiinference/20231130/datatypes/ToolDefinition\fP\&.
This is a complex type whose value must be valid JSON. The value can be provided as a string on the command line or passed in as a file using
the \fI\%file://path/to/file\fP syntax.
.sp
The \fB\-\-generate\-param\-json\-input\fP option can be used to generate an example of the JSON which must be provided. We recommend storing this example
in a file, modifying it as needed and then passing it back in via the \fI\%file://\fP syntax.
.INDENT 0.0
.TP
.B \-\-chat\-request\-top\-k [integer]
.UNINDENT
.sp
An integer that sets up the model to use only the top k most likely tokens in the generated output. A higher k introduces more randomness into the output making the output text sound more natural. Default value is \-1 which means to consider all tokens. Setting to 0 disables this method and considers all tokens.
.sp
If also using top p, then the model considers only the top tokens whose probabilities add up to p percent and ignores the rest of the k tokens. For example, if k is 20, but the probabilities of the top 10 add up to .75, then only the top 10 tokens are chosen.
.INDENT 0.0
.TP
.B \-\-chat\-request\-top\-p [text]
.UNINDENT
.sp
If set to a probability 0.0 < p < 1.0, it ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step.
.sp
To eliminate tokens with low likelihood, assign p a minimum percentage for the next token’s likelihood. For example, when p is set to 0.75, the model eliminates the bottom 25 percent for the next token. Set to 1 to consider all tokens and set to 0 to disable. If both k and p are enabled, p acts after k.
.INDENT 0.0
.TP
.B \-\-from\-json [text]
.UNINDENT
.sp
Provide input to this command as a JSON document from a file using the \fI\%file://path\-to/file\fP syntax.
.sp
The \fB\-\-generate\-full\-command\-json\-input\fP option can be used to generate a sample json file to be used with this command option. The key names are pre\-populated and match the command option names (converted to camelCase format, e.g. compartment\-id –> compartmentId), while the values of the keys need to be populated by the user before using the sample file as an input to this command. For any command option that accepts multiple values, the value of the key can be a JSON array.
.sp
Options can still be provided on the command line. If an option exists in both the JSON document and the command line then the command line specified value will be used.
.sp
For examples on usage of this option, please see our “using CLI with advanced JSON options” link: \fI\%https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOptions\fP
.SH GLOBAL PARAMETERS
.sp
Use \fBoci \-\-help\fP for help on global parameters.
.sp
\fB\-\-auth\-purpose\fP, \fB\-\-auth\fP, \fB\-\-cert\-bundle\fP, \fB\-\-cli\-auto\-prompt\fP, \fB\-\-cli\-rc\-file\fP, \fB\-\-config\-file\fP, \fB\-\-connection\-timeout\fP, \fB\-\-debug\fP, \fB\-\-defaults\-file\fP, \fB\-\-endpoint\fP, \fB\-\-generate\-full\-command\-json\-input\fP, \fB\-\-generate\-param\-json\-input\fP, \fB\-\-help\fP, \fB\-\-latest\-version\fP, \fB\-\-max\-retries\fP, \fB\-\-no\-retry\fP, \fB\-\-opc\-client\-request\-id\fP, \fB\-\-opc\-request\-id\fP, \fB\-\-output\fP, \fB\-\-profile\fP, \fB\-\-proxy\fP, \fB\-\-query\fP, \fB\-\-raw\-output\fP, \fB\-\-read\-timeout\fP, \fB\-\-realm\-specific\-endpoint\fP, \fB\-\-region\fP, \fB\-\-release\-info\fP, \fB\-\-request\-id\fP, \fB\-\-version\fP, \fB\-?\fP, \fB\-d\fP, \fB\-h\fP, \fB\-i\fP, \fB\-v\fP
.SH EXAMPLE USING REQUIRED PARAMETER
.sp
Copy and paste the following example into a JSON file, replacing the example parameters with your own.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    oci generative\-ai\-inference chat\-result chat\-generic\-chat\-request \-\-generate\-param\-json\-input serving\-mode > serving\-mode.json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Copy the following CLI commands into a file named example.sh. Run the command by typing “bash example.sh” and replacing the example parameters with your own.
.sp
Please note this sample will only work in the POSIX\-compliant bash\-like shell. You need to set up \fI\%the OCI configuration\fP <\fBhttps://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/cliinstall.htm#configfile\fP> and \fI\%appropriate security policies\fP <\fBhttps://docs.oracle.com/en-us/iaas/Content/Identity/Concepts/policygetstarted.htm\fP> before trying the examples.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    export compartment_id=<substitute\-value\-of\-compartment_id> # https://docs.cloud.oracle.com/en\-us/iaas/tools/oci\-cli/latest/oci_cli_docs/cmdref/generative\-ai\-inference/chat\-result/chat\-generic\-chat\-request.html#cmdoption\-compartment\-id

    oci generative\-ai\-inference chat\-result chat\-generic\-chat\-request \-\-compartment\-id $compartment_id \-\-serving\-mode file://serving\-mode.json
.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Oracle
.SH COPYRIGHT
2016, 2025, Oracle
.\" Generated by docutils manpage writer.
.
