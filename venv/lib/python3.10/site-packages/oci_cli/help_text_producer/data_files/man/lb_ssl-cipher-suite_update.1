.\" Man page generated from reStructuredText.
.
.TH "LB_SSL-CIPHER-SUITE_UPDATE" "1" "Apr 23, 2025" "3.54.5" "OCI CLI Command Reference"
.SH NAME
lb_ssl-cipher-suite_update \- 
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.IP \(bu 2
\fI\%Description\fP
.IP \(bu 2
\fI\%Usage\fP
.IP \(bu 2
\fI\%Required Parameters\fP
.IP \(bu 2
\fI\%Optional Parameters\fP
.IP \(bu 2
\fI\%Global Parameters\fP
.IP \(bu 2
\fI\%Example using required parameter\fP
.UNINDENT
.SH DESCRIPTION
.sp
Updates an existing SSL cipher suite for the specified load balancer.
.SH USAGE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
oci lb ssl\-cipher\-suite update [OPTIONS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH REQUIRED PARAMETERS
.INDENT 0.0
.TP
.B \-\-ciphers [complex type]
.UNINDENT
.sp
A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
.sp
The following ciphers are valid values for this property:
.INDENT 0.0
.IP \(bu 2
__TLSv1.3 
.nf
ciphers__
.fi

.INDENT 2.0
.INDENT 3.5
“TLS_AES_128_GCM_SHA256”         “TLS_AES_256_GCM_SHA384”         “TLS_CHACHA20_POLY1305_SHA256”         “TLS_AES_128_CCM_SHA256”         “TLS_AES_128_CCM_8_SHA256”
.UNINDENT
.UNINDENT
.IP \(bu 2
__TLSv1.2 
.nf
ciphers__
.fi

.INDENT 2.0
.INDENT 3.5
“AES128\-GCM\-SHA256”         “AES128\-SHA256”         “AES256\-GCM\-SHA384”         “AES256\-SHA256”         “DH\-DSS\-AES128\-GCM\-SHA256”         “DH\-DSS\-AES128\-SHA256”         “DH\-DSS\-AES256\-GCM\-SHA384”         “DH\-DSS\-AES256\-SHA256”         “DH\-RSA\-AES128\-GCM\-SHA256”         “DH\-RSA\-AES128\-SHA256”         “DH\-RSA\-AES256\-GCM\-SHA384”         “DH\-RSA\-AES256\-SHA256”         “DHE\-DSS\-AES128\-GCM\-SHA256”         “DHE\-DSS\-AES128\-SHA256”         “DHE\-DSS\-AES256\-GCM\-SHA384”         “DHE\-DSS\-AES256\-SHA256”         “DHE\-RSA\-AES128\-GCM\-SHA256”         “DHE\-RSA\-AES128\-SHA256”         “DHE\-RSA\-AES256\-GCM\-SHA384”         “DHE\-RSA\-AES256\-SHA256”         “ECDH\-ECDSA\-AES128\-GCM\-SHA256”         “ECDH\-ECDSA\-AES128\-SHA256”         “ECDH\-ECDSA\-AES256\-GCM\-SHA384”         “ECDH\-ECDSA\-AES256\-SHA384”         “ECDH\-RSA\-AES128\-GCM\-SHA256”         “ECDH\-RSA\-AES128\-SHA256”         “ECDH\-RSA\-AES256\-GCM\-SHA384”         “ECDH\-RSA\-AES256\-SHA384”         “ECDHE\-ECDSA\-AES128\-GCM\-SHA256”         “ECDHE\-ECDSA\-AES128\-SHA256”         “ECDHE\-ECDSA\-AES256\-GCM\-SHA384”         “ECDHE\-ECDSA\-AES256\-SHA384”         “ECDHE\-RSA\-AES128\-GCM\-SHA256”         “ECDHE\-RSA\-AES128\-SHA256”         “ECDHE\-RSA\-AES256\-GCM\-SHA384”         “ECDHE\-RSA\-AES256\-SHA384”
.UNINDENT
.UNINDENT
.IP \(bu 2
__TLSv1 ciphers also supported by 
.nf
TLSv1.2__
.fi

.INDENT 2.0
.INDENT 3.5
“AES128\-SHA”         “AES256\-SHA”         “CAMELLIA128\-SHA”         “CAMELLIA256\-SHA”         “DES\-CBC3\-SHA”         “DH\-DSS\-AES128\-SHA”         “DH\-DSS\-AES256\-SHA”         “DH\-DSS\-CAMELLIA128\-SHA”         “DH\-DSS\-CAMELLIA256\-SHA”         “DH\-DSS\-DES\-CBC3\-SHAv”         “DH\-DSS\-SEED\-SHA”         “DH\-RSA\-AES128\-SHA”         “DH\-RSA\-AES256\-SHA”         “DH\-RSA\-CAMELLIA128\-SHA”         “DH\-RSA\-CAMELLIA256\-SHA”         “DH\-RSA\-DES\-CBC3\-SHA”         “DH\-RSA\-SEED\-SHA”         “DHE\-DSS\-AES128\-SHA”         “DHE\-DSS\-AES256\-SHA”         “DHE\-DSS\-CAMELLIA128\-SHA”         “DHE\-DSS\-CAMELLIA256\-SHA”         “DHE\-DSS\-DES\-CBC3\-SHA”         “DHE\-DSS\-SEED\-SHA”         “DHE\-RSA\-AES128\-SHA”         “DHE\-RSA\-AES256\-SHA”         “DHE\-RSA\-CAMELLIA128\-SHA”         “DHE\-RSA\-CAMELLIA256\-SHA”         “DHE\-RSA\-DES\-CBC3\-SHA”         “DHE\-RSA\-SEED\-SHA”         “ECDH\-ECDSA\-AES128\-SHA”         “ECDH\-ECDSA\-AES256\-SHA”         “ECDH\-ECDSA\-DES\-CBC3\-SHA”         “ECDH\-ECDSA\-RC4\-SHA”         “ECDH\-RSA\-AES128\-SHA”         “ECDH\-RSA\-AES256\-SHA”         “ECDH\-RSA\-DES\-CBC3\-SHA”         “ECDH\-RSA\-RC4\-SHA”         “ECDHE\-ECDSA\-AES128\-SHA”         “ECDHE\-ECDSA\-AES256\-SHA”         “ECDHE\-ECDSA\-DES\-CBC3\-SHA”         “ECDHE\-ECDSA\-RC4\-SHA”         “ECDHE\-RSA\-AES128\-SHA”         “ECDHE\-RSA\-AES256\-SHA”         “ECDHE\-RSA\-DES\-CBC3\-SHA”         “ECDHE\-RSA\-RC4\-SHA”         “IDEA\-CBC\-SHA”         “KRB5\-DES\-CBC3\-MD5”         “KRB5\-DES\-CBC3\-SHA”         “KRB5\-IDEA\-CBC\-MD5”         “KRB5\-IDEA\-CBC\-SHA”         “KRB5\-RC4\-MD5”         “KRB5\-RC4\-SHA”         “PSK\-3DES\-EDE\-CBC\-SHA”         “PSK\-AES128\-CBC\-SHA”         “PSK\-AES256\-CBC\-SHA”         “PSK\-RC4\-SHA”         “RC4\-MD5”         “RC4\-SHA”         “SEED\-SHA”
.UNINDENT
.UNINDENT
.UNINDENT
.sp
example: \fI[“ECDHE\-RSA\-AES256\-GCM\-SHA384”,”ECDHE\-ECDSA\-AES256\-GCM\-SHA384”,”ECDHE\-RSA\-AES128\-GCM\-SHA256”]\fP
This is a complex type whose value must be valid JSON. The value can be provided as a string on the command line or passed in as a file using
the \fI\%file://path/to/file\fP syntax.
.sp
The \fB\-\-generate\-param\-json\-input\fP option can be used to generate an example of the JSON which must be provided. We recommend storing this example
in a file, modifying it as needed and then passing it back in via the \fI\%file://\fP syntax.
.INDENT 0.0
.TP
.B \-\-load\-balancer\-id [text]
.UNINDENT
.sp
The \fI\%OCID\fP <\fBhttps://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm\fP> of the associated load balancer.
.INDENT 0.0
.TP
.B \-\-name [text]
.UNINDENT
.sp
The name of the SSL cipher suite to update.
.sp
example: \fIexample_cipher_suite\fP
.SH OPTIONAL PARAMETERS
.INDENT 0.0
.TP
.B \-\-force
.UNINDENT
.sp
Perform update without prompting for confirmation.
.INDENT 0.0
.TP
.B \-\-from\-json [text]
.UNINDENT
.sp
Provide input to this command as a JSON document from a file using the \fI\%file://path\-to/file\fP syntax.
.sp
The \fB\-\-generate\-full\-command\-json\-input\fP option can be used to generate a sample json file to be used with this command option. The key names are pre\-populated and match the command option names (converted to camelCase format, e.g. compartment\-id –> compartmentId), while the values of the keys need to be populated by the user before using the sample file as an input to this command. For any command option that accepts multiple values, the value of the key can be a JSON array.
.sp
Options can still be provided on the command line. If an option exists in both the JSON document and the command line then the command line specified value will be used.
.sp
For examples on usage of this option, please see our “using CLI with advanced JSON options” link: \fI\%https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/cliusing.htm#AdvancedJSONOptions\fP
.INDENT 0.0
.TP
.B \-\-if\-match [text]
.UNINDENT
.sp
For optimistic concurrency control. In the PUT or DELETE call for a resource, set the if\-match parameter to the value of the ETag for the load balancer. This value can be obtained from a GET or POST response for any resource of that load balancer.
.sp
For example, the eTag returned by getListener can be specified as the ifMatch for updateRuleSets.
.sp
The resource is updated or deleted only if the ETag you provide matches the resource’s current ETag value.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
example\-etag
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-wait\-seconds [integer]
.UNINDENT
.sp
The maximum time to wait for the work request to reach the state defined by \fB\-\-wait\-for\-state\fP\&. Defaults to 1200 seconds.
.INDENT 0.0
.TP
.B \-\-wait\-for\-state [text]
.UNINDENT
.sp
This operation asynchronously creates, modifies or deletes a resource and uses a work request to track the progress of the operation. Specify this option to perform the action and then wait until the work request reaches a certain state. Multiple states can be specified, returning on the first state. For example, \fB\-\-wait\-for\-state\fP SUCCEEDED \fB\-\-wait\-for\-state\fP FAILED would return on whichever lifecycle state is reached first. If timeout is reached, a return code of 2 is returned. For any other error, a return code of 1 is returned.
.sp
Accepted values are:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ACCEPTED, FAILED, IN_PROGRESS, SUCCEEDED
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-wait\-interval\-seconds [integer]
.UNINDENT
.sp
Check every \fB\-\-wait\-interval\-seconds\fP to see whether the work request has reached the state defined by \fB\-\-wait\-for\-state\fP\&. Defaults to 30 seconds.
.SH GLOBAL PARAMETERS
.sp
Use \fBoci \-\-help\fP for help on global parameters.
.sp
\fB\-\-auth\-purpose\fP, \fB\-\-auth\fP, \fB\-\-cert\-bundle\fP, \fB\-\-cli\-auto\-prompt\fP, \fB\-\-cli\-rc\-file\fP, \fB\-\-config\-file\fP, \fB\-\-connection\-timeout\fP, \fB\-\-debug\fP, \fB\-\-defaults\-file\fP, \fB\-\-endpoint\fP, \fB\-\-generate\-full\-command\-json\-input\fP, \fB\-\-generate\-param\-json\-input\fP, \fB\-\-help\fP, \fB\-\-latest\-version\fP, \fB\-\-max\-retries\fP, \fB\-\-no\-retry\fP, \fB\-\-opc\-client\-request\-id\fP, \fB\-\-opc\-request\-id\fP, \fB\-\-output\fP, \fB\-\-profile\fP, \fB\-\-proxy\fP, \fB\-\-query\fP, \fB\-\-raw\-output\fP, \fB\-\-read\-timeout\fP, \fB\-\-realm\-specific\-endpoint\fP, \fB\-\-region\fP, \fB\-\-release\-info\fP, \fB\-\-request\-id\fP, \fB\-\-version\fP, \fB\-?\fP, \fB\-d\fP, \fB\-h\fP, \fB\-i\fP, \fB\-v\fP
.SH EXAMPLE USING REQUIRED PARAMETER
.sp
Copy and paste the following example into a JSON file, replacing the example parameters with your own.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    oci lb load\-balancer create \-\-generate\-param\-json\-input subnet\-ids > subnet\-ids.json

    oci lb ssl\-cipher\-suite update \-\-generate\-param\-json\-input ciphers > ciphers.json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Copy the following CLI commands into a file named example.sh. Run the command by typing “bash example.sh” and replacing the example parameters with your own.
.sp
Please note this sample will only work in the POSIX\-compliant bash\-like shell. You need to set up \fI\%the OCI configuration\fP <\fBhttps://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/cliinstall.htm#configfile\fP> and \fI\%appropriate security policies\fP <\fBhttps://docs.oracle.com/en-us/iaas/Content/Identity/Concepts/policygetstarted.htm\fP> before trying the examples.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    export compartment_id=<substitute\-value\-of\-compartment_id> # https://docs.cloud.oracle.com/en\-us/iaas/tools/oci\-cli/latest/oci_cli_docs/cmdref/lb/load\-balancer/create.html#cmdoption\-compartment\-id
    export display_name=<substitute\-value\-of\-display_name> # https://docs.cloud.oracle.com/en\-us/iaas/tools/oci\-cli/latest/oci_cli_docs/cmdref/lb/load\-balancer/create.html#cmdoption\-display\-name
    export shape_name=<substitute\-value\-of\-shape_name> # https://docs.cloud.oracle.com/en\-us/iaas/tools/oci\-cli/latest/oci_cli_docs/cmdref/lb/load\-balancer/create.html#cmdoption\-shape\-name

    load_balancer_id=$(oci lb load\-balancer create \-\-compartment\-id $compartment_id \-\-display\-name $display_name \-\-shape\-name $shape_name \-\-subnet\-ids file://subnet\-ids.json \-\-query data.id \-\-raw\-output)

    oci lb ssl\-cipher\-suite update \-\-ciphers file://ciphers.json \-\-load\-balancer\-id $load_balancer_id \-\-name $name
.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Oracle
.SH COPYRIGHT
2016, 2025, Oracle
.\" Generated by docutils manpage writer.
.
