"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates the configuration of a backend server within the specified
backend set.


Usage
=====

   oci lb backend update [OPTIONS]


Required Parameters
===================

--backend-name [text]

The IP address and port of the backend server to update.

Example:

   10.0.0.3:8080

--backend-set-name [text]

The name of the backend set associated with the backend server.

Example:

   example_backend_set

--backup [boolean]

Whether the load balancer should treat this server as a backup unit.
If *true*, the load balancer forwards no ingress traffic to this
backend server unless all other backend servers not marked as “backup”
fail the health check policy.

**Note:** You cannot add a backend server marked as *backup* to a
backend set that uses the IP Hash policy.

Example:

   false

--drain [boolean]

Whether the load balancer should drain this server. Servers marked
“drain” receive no new incoming traffic.

Example:

   false

--load-balancer-id [text]

The OCID of the load balancer associated with the backend set and
server.

--offline [boolean]

Whether the load balancer should treat this server as offline. Offline
servers receive no incoming traffic.

Example:

   false

--weight [integer]

The load balancing policy weight assigned to the server. Backend
servers with a higher weight receive a larger proportion of incoming
traffic. For example, a server weighted ‘3’ receives 3 times the
number of new connections as a server weighted ‘1’. For more
information on load balancing policies, see How Load Balancing
Policies Work.

Example:

   3


Optional Parameters
===================

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the if-match parameter to the value of the ETag for the
load balancer. This value can be obtained from a GET or POST response
for any resource of that load balancer.

For example, the eTag returned by getListener can be specified as the
ifMatch for updateRuleSets.

The resource is updated or deleted only if the ETag you provide
matches the resource’s current ETag value.

Example:

   example-etag

--max-connections [integer]

The maximum number of simultaneous connections the load balancer can
make to the backend. If this is not set then the maximum number of
simultaneous connections the load balancer can make to the backend is
unlimited.

Example:

   300

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci lb load-balancer create --generate-param-json-input subnet-ids > subnet-ids.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/load-balancer/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/load-balancer/create.html#cmdoption-display-name
       export shape_name=<substitute-value-of-shape_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/load-balancer/create.html#cmdoption-shape-name
       export backend_name=<substitute-value-of-backend_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/backend/update.html#cmdoption-backend-name
       export backend_set_name=<substitute-value-of-backend_set_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/backend/update.html#cmdoption-backend-set-name
       export backup=<substitute-value-of-backup> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/backend/update.html#cmdoption-backup
       export drain=<substitute-value-of-drain> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/backend/update.html#cmdoption-drain
       export offline=<substitute-value-of-offline> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/backend/update.html#cmdoption-offline
       export weight=<substitute-value-of-weight> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/lb/backend/update.html#cmdoption-weight

       load_balancer_id=$(oci lb load-balancer create --compartment-id $compartment_id --display-name $display_name --shape-name $shape_name --subnet-ids file://subnet-ids.json --query data.id --raw-output)

       oci lb backend update --backend-name $backend_name --backend-set-name $backend_set_name --backup $backup --drain $drain --load-balancer-id $load_balancer_id --offline $offline --weight $weight
