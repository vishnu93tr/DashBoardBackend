"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Create a user.

The top level –endpoint parameter must be supplied for this operation.


Usage
=====

   oci identity-domains user create [OPTIONS]


Required Parameters
===================

--schemas [complex type]

REQUIRED. The schemas attribute is an array of Strings which allows
introspection of the supported schema version for a SCIM
representation as well any schema extensions supported by that
representation. Each String value must be a unique URI. This
specification defines URIs for User, Group, and a standard
“enterprise” extension. All representations of SCIM schema MUST
include a non-zero value array with value(s) of the URIs supported by
that representation. Duplicate values MUST NOT be included. Value
order is not specified and MUST not impact behavior.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: true  - mutability: readWrite  - required: true  -
returned: default  - type: string  - uniqueness: none This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--user-name [text]

User name

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
User ID  - idcsCsvAttributeNameMappings: [[columnHeaderName:User Name,
deprecatedColumnHeaderName:User ID]]  - idcsPii: true  -
idcsSearchable: true  - multiValued: false  - mutability: readWrite  -
required: true  - returned: always  - type: string  - uniqueness:
global


Optional Parameters
===================

--active [boolean]

User status

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
Active  - idcsCsvAttributeNameMappings: [[columnHeaderName:Active]]  -
idcsSearchable: true  - multiValued: false  - mutability: readWrite  -
required: false  - returned: default  - type: boolean  - uniqueness:
none

--addresses [complex type]

A physical mailing address for this User, as described in (address
Element). Canonical Type Values of work, home, and other. The value
attribute is a complex type with the following sub-attributes.

**SCIM++ Properties:**  - idcsCompositeKey: [type]  -
idcsCsvAttributeNameMappings: [[columnHeaderName:Work Address Street,
deprecatedColumnHeaderName:Work Street Address,
mapsTo:addresses[work].streetAddress], [columnHeaderName:Work Address
Locality, deprecatedColumnHeaderName:Work City,
mapsTo:addresses[work].locality], [columnHeaderName:Work Address
Region, deprecatedColumnHeaderName:Work State,
mapsTo:addresses[work].region], [columnHeaderName:Work Address Postal
Code, deprecatedColumnHeaderName:Work Postal Code,
mapsTo:addresses[work].postalCode], [columnHeaderName:Work Address
Country, deprecatedColumnHeaderName:Work Country,
mapsTo:addresses[work].country], [columnHeaderName:Work Address
Formatted, mapsTo:addresses[work].formatted], [columnHeaderName:Home
Address Formatted, mapsTo:addresses[home].formatted],
[columnHeaderName:Other Address Formatted,
mapsTo:addresses[other].formatted], [columnHeaderName:Home Address
Street, mapsTo:addresses[home].streetAddress], [columnHeaderName:Other
Address Street, mapsTo:addresses[other].streetAddress],
[columnHeaderName:Home Address Locality,
mapsTo:addresses[home].locality], [columnHeaderName:Other Address
Locality, mapsTo:addresses[other].locality], [columnHeaderName:Home
Address Region, mapsTo:addresses[home].region],
[columnHeaderName:Other Address Region,
mapsTo:addresses[other].region], [columnHeaderName:Home Address
Country, mapsTo:addresses[home].country], [columnHeaderName:Other
Address Country, mapsTo:addresses[other].country],
[columnHeaderName:Home Address Postal Code,
mapsTo:addresses[home].postalCode], [columnHeaderName:Other Address
Postal Code, mapsTo:addresses[other].postalCode],
[columnHeaderName:Primary Address Type,
mapsTo:addresses[$(type)].primary]]  - idcsPii: true  - multiValued:
true  - mutability: readWrite  - required: false  - returned: default
- type: complex  - uniqueness: none

This option is a JSON list with items of type Addresses.  For
documentation on addresses please see our API reference: https://docs
.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/Addresses.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--attribute-sets [text]

A multi-valued list of strings indicating the return type of attribute
definition. The specified set of attributes can be fetched by the
return type of the attribute. One or more values can be given together
to fetch more than one group of attributes. If ‘attributes’ query
parameter is also available, union of the two is fetched. Valid values
- all, always, never, request, default. Values are case-insensitive.

Accepted values are:

   all, always, default, never, request

--attributes [text]

A comma-delimited string that specifies the names of resource
attributes that should be returned in the response. By default, a
response that contains resource attributes contains only attributes
that are defined in the schema for that resource type as
returned=always or returned=default. An attribute that is defined as
returned=request is returned in a response only if the request
specifies its name in the value of this query parameter. If a request
specifies this query parameter, the response contains the attributes
that this query parameter specifies, as well as any attribute that is
defined as returned=always.

--authorization [text]

The Authorization field value consists of credentials containing the
authentication information of the user agent for the realm of the
resource being requested.

--compartment-ocid [text]

OCI Compartment Id (ocid) in which the resource lives.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: string  - uniqueness: none

--delete-in-progress [boolean]

A boolean flag indicating this resource in the process of being
deleted. Usually set to true when synchronous deletion of the resource
would take too long.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--description [text]

Description of the user

**Added In:** 2012271618

**SCIM++ Properties:**  - caseExact: false  - idcsPii: true  -
idcsSearchable: false  - multiValued: false  - mutability: readWrite
- required: false  - returned: default  - type: string  - uniqueness:
none

--display-name [text]

Display name

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
Display Name  - idcsCsvAttributeNameMappings:
[[columnHeaderName:Display Name]]  - idcsPii: true  - idcsSearchable:
true  - multiValued: false  - mutability: readWrite  - required: false
- returned: default  - type: string  - uniqueness: none

--domain-ocid [text]

OCI Domain Id (ocid) in which the resource lives.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: string  - uniqueness: none

--emails [complex type]

A complex attribute representing emails

**SCIM++ Properties:**  - idcsCompositeKey: [value, type]  -
idcsCsvAttributeNameMappings: [[columnHeaderName:Work Email,
mapsTo:emails[work].value], [columnHeaderName:Home Email,
mapsTo:emails[home].value], [columnHeaderName:Primary Email Type,
mapsTo:emails[$(type)].primary], [columnHeaderName:Other Email,
mapsTo:emails[other].value], [columnHeaderName:Recovery Email,
mapsTo:emails[recovery].value], [columnHeaderName:Work Email Verified,
mapsTo:emails[work].verified], [columnHeaderName:Home Email Verified,
mapsTo:emails[home].verified], [columnHeaderName:Other Email Verified,
mapsTo:emails[other].verified], [columnHeaderName:Recovery Email
Verified, mapsTo:emails[recovery].verified]]  - idcsPii: true  -
multiValued: true  - mutability: readWrite  - required: false  -
returned: default  - type: complex  - uniqueness: none

This option is a JSON list with items of type UserEmails.  For
documentation on UserEmails please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/UserEmails.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--entitlements [complex type]

A list of entitlements for the User that represent a thing the User
has.

**SCIM++ Properties:**  - idcsCompositeKey: [value, type]  -
multiValued: true  - mutability: readWrite  - required: false  -
returned: default  - type: complex  - uniqueness: none

This option is a JSON list with items of type UserEntitlements.  For
documentation on UserEntitlements please see our API reference: https
://docs.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/UserEn
titlements. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-adaptive-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-capabilities-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-db-credentials-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-db-user-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-enterprise-20-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-kerberos-user-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-mfa-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-oci-tags [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-password-state-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-passwordless-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-posix-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-security-questions-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-self-change-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-self-registration-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-sff-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-social-account-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-terms-of-use-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-user-credentials-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-user-state-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-user-user [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--external-id [text]

An identifier for the Resource as defined by the Service Consumer. The
externalId may simplify identification of the Resource between Service
Consumer and Service Provider by allowing the Consumer to refer to the
Resource with its own identifier, obviating the need to store a local
mapping between the local identifier of the Resource and the
identifier used by the Service Provider. Each Resource MAY include a
non-empty externalId value. The value of the externalId attribute is
always issued by the Service Consumer and can never be specified by
the Service Provider. The Service Provider MUST always interpret the
externalId as scoped to the Service Consumer’s tenant.

**SCIM++ Properties:**  - caseExact: false  -
idcsCsvAttributeNameMappings: [[columnHeaderName:External Id]]  -
idcsPii: true  - idcsSearchable: true  - multiValued: false  -
mutability: readWrite  - required: false  - returned: default  - type:
string  - uniqueness: none

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--groups [complex type]

A list of groups that the user belongs to, either thorough direct
membership, nested groups, or dynamically calculated

**SCIM++ Properties:**  - idcsCompositeKey: [value]  - idcsSearchable:
true  - multiValued: true  - mutability: readOnly  - required: false
- returned: request  - type: complex  - uniqueness: none

This option is a JSON list with items of type UserGroups.  For
documentation on UserGroups please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/UserGroups.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--id [text]

Unique identifier for the SCIM Resource as defined by the Service
Provider. Each representation of the Resource MUST include a non-empty
id value. This identifier MUST be unique across the Service Provider’s
entire set of Resources. It MUST be a stable, non-reassignable
identifier that does not change when the same Resource is returned in
subsequent requests. The value of the id attribute is always issued by
the Service Provider and MUST never be specified by the Service
Consumer. bulkId: is a reserved keyword and MUST NOT be used in the
unique identifier.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: always  - type: string  - uniqueness: global

--idcs-created-by [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--idcs-last-modified-by [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--idcs-last-upgraded-in-release [text]

The release number when the resource was upgraded.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: request  - type: string  - uniqueness: none

--idcs-prevented-operations [text]

Each value of this attribute specifies an operation that only an
internal client may perform on this particular resource.

**SCIM++ Properties:**  - idcsSearchable: false  - multiValued: true
- mutability: readOnly  - required: false  - returned: request  -
type: string  - uniqueness: none

Accepted values are:

   delete, replace, update

--ims [complex type]

User’s instant messaging addresses

**SCIM++ Properties:**  - idcsCompositeKey: [value, type]  - idcsPii:
true  - multiValued: true  - mutability: readWrite  - required: false
- returned: default  - type: complex  - uniqueness: none

This option is a JSON list with items of type UserIms.  For
documentation on UserIms please see our API reference: https://docs.c
loud.oracle.com/api/#/en/identitydomains/v1/datatypes/UserIms. This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--locale [text]

Used to indicate the User’s default location for purposes of
localizing items such as currency, date and time format, numerical
representations, and so on.

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
Locale  - idcsCsvAttributeNameMappings: [[columnHeaderName:Locale]]  -
idcsSearchable: true  - multiValued: false  - mutability: readWrite  -
required: false  - returned: default  - type: string  - uniqueness:
none

--meta [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--name [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--nick-name [text]

Nick name

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
Nick Name  - idcsCsvAttributeNameMappings: [[columnHeaderName:Nick
Name]]  - idcsPii: true  - idcsSearchable: true  - multiValued: false
- mutability: readWrite  - required: false  - returned: default  -
type: string  - uniqueness: none

--ocid [text]

Unique OCI identifier for the SCIM Resource.

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: true  -
multiValued: false  - mutability: immutable  - required: false  -
returned: default  - type: string  - uniqueness: global

--password [text]

Password attribute. Max length for password is controlled via Password
Policy.

**SCIM++ Properties:**  - idcsCsvAttributeName: Password  -
idcsCsvAttributeNameMappings: [[columnHeaderName:Password]]  -
idcsPii: true  - idcsSearchable: false  - idcsSensitive: hash  -
multiValued: false  - mutability: writeOnly  - required: false  -
returned: never  - type: string  - uniqueness: none

--phone-numbers [complex type]

Phone numbers

**SCIM++ Properties:**  - idcsCompositeKey: [value, type]  -
idcsCsvAttributeNameMappings: [[columnHeaderName:Work Phone,
mapsTo:phoneNumbers[work].value], [columnHeaderName:Mobile No,
mapsTo:phoneNumbers[mobile].value], [columnHeaderName:Home Phone,
mapsTo:phoneNumbers[home].value], [columnHeaderName:Fax,
mapsTo:phoneNumbers[fax].value], [columnHeaderName:Pager,
mapsTo:phoneNumbers[pager].value], [columnHeaderName:Other Phone,
mapsTo:phoneNumbers[other].value], [columnHeaderName:Recovery Phone,
mapsTo:phoneNumbers[recovery].value], [columnHeaderName:Primary Phone
Type, mapsTo:phoneNumbers[$(type)].primary]]  - idcsPii: true  -
multiValued: true  - mutability: readWrite  - required: false  -
returned: default  - type: complex  - uniqueness: none

This option is a JSON list with items of type UserPhoneNumbers.  For
documentation on UserPhoneNumbers please see our API reference: https
://docs.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/UserPh
oneNumbers. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--photos [complex type]

URLs of photos for the User

**SCIM++ Properties:**  - idcsCompositeKey: [value, type]  - idcsPii:
true  - multiValued: true  - mutability: readWrite  - required: false
- returned: default  - type: complex  - uniqueness: none

This option is a JSON list with items of type UserPhotos.  For
documentation on UserPhotos please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/UserPhotos.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--preferred-language [text]

User’s preferred written or spoken language used for localized user
interfaces

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
Preferred Language  - idcsCsvAttributeNameMappings:
[[columnHeaderName:Preferred Language]]  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--profile-url [text]

A fully-qualified URL to a page representing the User’s online profile

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
Profile URL  - idcsCsvAttributeNameMappings:
[[columnHeaderName:Profile Url]]  - idcsPii: true  - idcsSearchable:
true  - multiValued: false  - mutability: readWrite  - required: false
- returned: default  - type: reference  - uniqueness: none

--resource-type-schema-version [text]

An endpoint-specific schema version number to use in the Request.
Allowed version values are Earliest Version or Latest Version as
specified in each REST API endpoint description, or any sequential
number inbetween. All schema attributes/body parameters are a part of
version 1. After version 1, any attributes added or deprecated will be
tagged with the version that they were added to or deprecated in. If
no version is provided, the latest schema version is returned.

--roles [complex type]

A list of roles for the User that collectively represent who the User
is; e.g., ‘Student’, ‘Faculty’.

**SCIM++ Properties:**  - idcsCompositeKey: [value, type]  -
multiValued: true  - mutability: readWrite  - required: false  -
returned: default  - type: complex  - uniqueness: none

This option is a JSON list with items of type UserRoles.  For
documentation on UserRoles please see our API reference: https://docs
.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/UserRoles.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--tags [complex type]

A list of tags on this resource.

**SCIM++ Properties:**  - idcsCompositeKey: [key, value]  -
idcsSearchable: true  - multiValued: true  - mutability: readWrite  -
required: false  - returned: request  - type: complex  - uniqueness:
none

This option is a JSON list with items of type Tags.  For documentation
on tags please see our API reference: https://docs.cloud.oracle.com/a
pi/#/en/identitydomains/v1/datatypes/Tags. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--tenancy-ocid [text]

OCI Tenant Id (ocid) in which the resource lives.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: string  - uniqueness: none

--timezone [text]

User’s timezone

**SCIM++ Properties:**  - caseExact: false  -
idcsCanonicalValueSourceFilter: attrName eq “timezones” and
attrValues.value eq “$(timezone)”  -
idcsCanonicalValueSourceResourceType: AllowedValue  -
idcsCsvAttributeName: TimeZone  - idcsCsvAttributeNameMappings:
[[columnHeaderName:Time Zone, deprecatedColumnHeaderName:TimeZone]]  -
idcsSearchable: true  - multiValued: false  - mutability: readWrite  -
required: false  - returned: default  - type: string  - uniqueness:
none

--title [text]

Title

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
Title  - idcsCsvAttributeNameMappings: [[columnHeaderName:Title]]  -
idcsPii: true  - idcsSearchable: true  - multiValued: false  -
mutability: readWrite  - required: false  - returned: default  - type:
string  - uniqueness: none

--user-type [text]

Used to identify the organization-to-user relationship

**SCIM++ Properties:**  - caseExact: false  - idcsCsvAttributeName:
User Type  - idcsCsvAttributeNameMappings: [[columnHeaderName:User
Type]]  - idcsPii: true  - idcsSearchable: true  - multiValued: false
- mutability: readWrite  - required: false  - returned: default  -
type: string  - uniqueness: none

Accepted values are:

   Contractor, Employee, External, Generic, Intern, Service, Temp

--x509-certificates [complex type]

A list of certificates issued to the User.

**SCIM++ Properties:**  - idcsCompositeKey: [value]  - multiValued:
true  - mutability: readWrite  - required: false  - returned: default
- type: complex  - uniqueness: none

This option is a JSON list with items of type UserX509Certificates.
For documentation on UserX509Certificates please see our API
reference: https://docs.cloud.oracle.com/api/#/en/identitydomains/v1/
datatypes/UserX509Certificates. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci identity-domains user create --generate-param-json-input schemas > schemas.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export user_name=<substitute-value-of-user_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/identity-domains/user/create.html#cmdoption-user-name

       oci identity-domains user create --schemas file://schemas.json --user-name $user_name
