"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new virtual cloud network (VCN). For more information, see
VCNs and Subnets.

For the VCN, you specify a list of one or more IPv4 CIDR blocks that
meet the following criteria:

* The CIDR blocks must be valid. - They must not overlap with each
  other or with the on-premises network CIDR block. - The number of
  CIDR blocks does not exceed the limit of CIDR blocks allowed per
  VCN.

For a CIDR block, Oracle recommends that you use one of the private IP
address ranges specified in RFC 1918 (10.0.0.0/8, 172.16/12, and
192.168/16). Example: 172.16.0.0/16. The CIDR blocks can range from
/16 to /30.

For the purposes of access control, you must provide the OCID of the
compartment where you want the VCN to reside. Consult an Oracle Cloud
Infrastructure administrator in your organization if you’re not sure
which compartment to use. Notice that the VCN doesn’t have to be in
the same compartment as the subnets or other Networking Service
components. For more information about compartments and access
control, see Overview of the IAM Service. For information about OCIDs,
see Resource Identifiers.

You may optionally specify a *display name* for the VCN, otherwise a
default is provided. It does not have to be unique, and you can change
it. Avoid entering confidential information.

You can also add a DNS label for the VCN, which is required if you
want the instances to use the Interent and VCN Resolver option for DNS
in the VCN. For more information, see DNS in Your Virtual Cloud
Network.

The VCN automatically comes with a default route table, default
security list, and default set of DHCP options. The OCID for each is
returned in the response. You can’t delete these default objects, but
you can change their contents (that is, change the route rules,
security list rules, and so on).

The VCN and subnets you create are not accessible until you attach an
internet gateway or set up a Site-to-Site VPN or FastConnect. For more
information, see Overview of the Networking Service.


Usage
=====

   oci network vcn create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment to contain the VCN.


Optional Parameters
===================

--byoipv6-cidr-details [complex type]

The list of BYOIPv6 OCIDs and BYOIPv6 prefixes required to create a
VCN that uses BYOIPv6 address ranges.

This option is a JSON list with items of type Byoipv6CidrDetails.  For
documentation on Byoipv6CidrDetails please see our API reference: htt
ps://docs.cloud.oracle.com/api/#/en/iaas/20160918/datatypes/Byoipv6Ci
drDetails. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--cidr-block [text]

**Deprecated.** Do *not* set this value. Use *cidrBlocks* instead.
Example: *10.0.0.0/16*

--cidr-blocks [complex type]

The list of one or more IPv4 CIDR blocks for the VCN that meet the
following criteria: - The CIDR blocks must be valid. - They must not
overlap with each other or with the on-premises network CIDR block. -
The number of CIDR blocks must not exceed the limit of CIDR blocks
allowed per VCN.

**Important:** Do *not* specify a value for *cidrBlock*. Use this
parameter instead. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags.

Example:

   {"Operations": {"CostCenter": "42"}}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

A user-friendly name. Does not have to be unique, and it’s changeable.
Avoid entering confidential information.

--dns-label [text]

A DNS label for the VCN, used in conjunction with the VNIC’s hostname
and subnet’s DNS label to form a fully qualified domain name (FQDN)
for each VNIC within this subnet (for example,
*bminstance1.subnet123.vcn1.oraclevcn.com*). Not required to be
unique, but it’s a best practice to set unique DNS labels for VCNs in
your tenancy. Must be an alphanumeric string that begins with a
letter. The value cannot be changed.

You must set this value if you want instances to be able to use
hostnames to resolve other instances in the VCN. Otherwise the
Internet and VCN Resolver will not work.

For more information, see DNS in Your Virtual Cloud Network.

Example:

   vcn1

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--ipv6-private-cidr-blocks [complex type]

The list of one or more ULA or Private IPv6 prefixes for the VCN that
meets the following criteria: - The CIDR blocks must be valid. -
Multiple CIDR blocks must not overlap each other or the on-premises
network prefix. - The number of CIDR blocks must not exceed the limit
of IPv6 prefixes allowed to a VCN.

**Important:** Do *not* specify a value for *ipv6CidrBlock*. Use this
parameter instead. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--is-ipv6-enabled [boolean]

Whether IPv6 is enabled for the VCN. Default is *false*. If enabled,
Oracle will assign the VCN a IPv6 /56 CIDR block. You may skip having
Oracle allocate the VCN a IPv6 /56 CIDR block by setting
isOracleGuaAllocationEnabled to *false*. For important details about
IPv6 addressing in a VCN, see IPv6 Addresses.

Example:

   true

--is-oracle-gua-allocation-enabled [boolean]

Specifies whether to skip Oracle allocated IPv6 GUA. By default,
Oracle will allocate one GUA of /56 size for an IPv6 enabled VCN.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--security-attributes [complex type]

Security attributes are labels for a resource that can be referenced
in a Zero Trust Packet Routing (ZPR) policy to control access to ZPR-
supported resources.

Example:

   {"Oracle-DataSecurity-ZPR": {"MaxEgressCount": {"value":"42","mode":"audit"}}}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   AVAILABLE, PROVISIONING, TERMINATED, TERMINATING, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export cidr_block=<substitute-value-of-cidr_block> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network/vcn/create.html#cmdoption-cidr-block
       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network/vcn/create.html#cmdoption-compartment-id

       oci network vcn create --cidr-block $cidr_block --compartment-id $compartment_id
