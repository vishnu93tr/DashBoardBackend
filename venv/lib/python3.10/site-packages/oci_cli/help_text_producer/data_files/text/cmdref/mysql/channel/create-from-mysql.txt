"create-from-mysql"
*******************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a Channel to establish replication from a source to a target.


Usage
=====

   oci mysql channel create-from-mysql [OPTIONS]


Required Parameters
===================

--source-hostname [text]

The network address of the MySQL instance.

--source-password [text]

The password for the replication user. The password must be between 8
and 32 characters long, and must contain at least 1 numeric character,
1 lowercase character, 1 uppercase character, and 1 special
(nonalphanumeric) character.

--source-ssl-mode [text]

The SSL mode of the Channel.

--source-username [text]

The name of the replication user on the source MySQL instance. The
username has a maximum length of 96 characters. For more information,
please see the MySQL documentation

--target-db-system-id [text]

The OCID of the target DB System.


Optional Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment.

--defined-tags [complex type]

Usage of predefined tag keys. These predefined keys are scoped to
namespaces. Example: *{“foo-namespace”: {“bar-key”: “value”}}* This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

User provided information about the Channel.

--display-name [text]

The user-friendly name for the Channel. It does not have to be unique.

--freeform-tags [complex type]

Simple key-value pair applied without any predefined name, type or
scope. Exists for cross-compatibility only. Example: *{“bar-key”:
“value”}* This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-enabled [boolean]

Whether the Channel should be enabled upon creation. If set to true,
the Channel will be asynchronously started as a result of the create
Channel operation.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--source-anonymous-transactions-handling [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--source-port [integer]

The port the source MySQL instance listens on.

--source-ssl-ca-certificate [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--target-applier-username [text]

The username for the replication applier of the target MySQL DB
System.

--target-channel-name [text]

The case-insensitive name that identifies the replication channel.
Channel names must follow the rules defined for MySQL identifiers. The
names of non-Deleted Channels must be unique for each DB System.

--target-delay-in-seconds [integer]

Specifies the amount of time, in seconds, that the channel waits
before applying a transaction received from the source.

--target-filters [complex type]

Replication filter rules to be applied at the DB System Channel
target.

This option is a JSON list with items of type ChannelFilter.  For
documentation on ChannelFilter please see our API reference: https://
docs.cloud.oracle.com/api/#/en/channels/20190415/datatypes/ChannelFil
ter. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--target-tables-without-primary-key-handling [text]

Specifies how a replication channel handles the creation and
alteration of tables that do not have a primary key. The default value
is set to ALLOW.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export source_hostname=<substitute-value-of-source_hostname> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/mysql/channel/create-from-mysql.html#cmdoption-source-hostname
       export source_password=<substitute-value-of-source_password> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/mysql/channel/create-from-mysql.html#cmdoption-source-password
       export source_ssl_mode=<substitute-value-of-source_ssl_mode> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/mysql/channel/create-from-mysql.html#cmdoption-source-ssl-mode
       export source_username=<substitute-value-of-source_username> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/mysql/channel/create-from-mysql.html#cmdoption-source-username
       export target_db_system_id=<substitute-value-of-target_db_system_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/mysql/channel/create-from-mysql.html#cmdoption-target-db-system-id

       oci mysql channel create-from-mysql --source-hostname $source_hostname --source-password $source_password --source-ssl-mode $source_ssl_mode --source-username $source_username --target-db-system-id $target_db_system_id
