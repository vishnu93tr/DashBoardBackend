"create-patch"
**************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a patch in an application.


Usage
=====

   oci data-integration application create-patch [OPTIONS]


Required Parameters
===================

--application-key [text]

The application key.

--identifier [text]

Value can only contain upper case letters, underscore and numbers. It
should begin with upper case letter or underscore. The value can be
modified.

--name [text]

Free form text without any restriction on permitted characters. Name
can have letters, numbers, and special characters. The value is
editable and is restricted to 1000 characters.

--object-keys [complex type]

The array of object keys to publish into application. This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--patch-type [text]

The type of the patch applied or being applied on the application.

Accepted values are:

   PUBLISH, REFRESH, UNPUBLISH

--workspace-id [text]

The workspace ID.


Optional Parameters
===================

--description [text]

Detailed description for the object.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--key [text]

The object’s key.

--model-version [text]

The object’s model version.

--object-status [integer]

The status of an object that can be set to value 1 for shallow
references across objects, other values reserved.

--registry-metadata [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci data-integration application create-patch --generate-param-json-input object-keys > object-keys.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/workspace/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/workspace/create.html#cmdoption-display-name
       export is_private_network=<substitute-value-of-is_private_network> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/workspace/create.html#cmdoption-is-private-network
       export application_key=<substitute-value-of-application_key> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/application/create-patch.html#cmdoption-application-key
       export identifier=<substitute-value-of-identifier> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/application/create-patch.html#cmdoption-identifier
       export patch_type=<substitute-value-of-patch_type> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/application/create-patch.html#cmdoption-patch-type

       workspace_id=$(oci data-integration workspace create --compartment-id $compartment_id --display-name $display_name --is-private-network $is_private_network --query data.id --raw-output)

       oci data-integration application create-patch --application-key $application_key --identifier $identifier --name $name --object-keys file://object-keys.json --patch-type $patch_type --workspace-id $workspace_id
