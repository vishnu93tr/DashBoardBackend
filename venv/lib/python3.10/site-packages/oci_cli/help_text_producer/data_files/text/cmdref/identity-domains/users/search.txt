"search"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Search for users using POST.

The top level –endpoint parameter must be supplied for this operation.


Usage
=====

   oci identity-domains users search [OPTIONS]


Required Parameters
===================

--schemas [complex type]

The schemas attribute is an array of Strings which allows
introspection of the supported schema version for a SCIM
representation as well any schema extensions supported by that
representation. Each String value must be a unique URI. Query requests
MUST be identified using the following URI:
“urn:ietf:params:scim:api:messages:2.0:SearchRequest” REQUIRED. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--attribute-sets [text]

A multi-valued list of strings indicating the return type of attribute
definition. The specified set of attributes can be fetched by the
return type of the attribute. One or more values can be given together
to fetch more than one group of attributes. If “attributes” query
parameter is also available, union of the two is fetched. Valid values
: all, always, never, request, default. Values are case-insensitive.
OPTIONAL.

Accepted values are:

   all, always, default, never, request

--attributes [complex type]

A multi-valued list of strings indicating the names of resource
attributes to return in the response overriding the set of attributes
that would be returned by default. Attribute names MUST be in standard
attribute notation (Section 3.10) form. See (additional retrieval
query parameters). OPTIONAL. This is a complex type whose value must
be valid JSON. The value can be provided as a string on the command
line or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--authorization [text]

The Authorization field value consists of credentials containing the
authentication information of the user agent for the realm of the
resource being requested.

--count [integer]

An integer that indicates the desired maximum number of query results
per page. 1000 is the largest value that you can use. See the
Pagination section of the System for Cross-Domain Identity Management
Protocol specification for more information. (Section 3.4.2.4).
OPTIONAL.

--filter [text]

The filter string that is used to request a subset of resources. The
filter string MUST be a valid filter expression. See Section 3.4.2.2.
OPTIONAL.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--limit [integer]

The maximum number of items to return in a paginated ‘List’ call.

--page [text]

The value of the *opc-next-page* response header from the previous
‘List’ call.

--resource-type-schema-version [text]

An endpoint-specific schema version number to use in the Request.
Allowed version values are Earliest Version or Latest Version as
specified in each REST API endpoint description, or any sequential
number inbetween. All schema attributes/body parameters are a part of
version 1. After version 1, any attributes added or deprecated will be
tagged with the version that they were added to or deprecated in. If
no version is provided, the latest schema version is returned.

--sort-by [text]

A string that indicates the attribute whose value SHALL be used to
order the returned responses. The sortBy attribute MUST be in standard
attribute notation (Section 3.10) form. See Sorting section. OPTIONAL.

--sort-order [text]

A string that indicates the order in which the sortBy parameter is
applied. Allowed values are “ascending” and “descending”. See (Sorting
Section). OPTIONAL.

Accepted values are:

   ASCENDING, DESCENDING

--start-index [integer]

An integer that indicates the 1-based index of the first query result.
See Pagination Section. OPTIONAL.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci identity-domains users search --generate-param-json-input schemas > schemas.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       oci identity-domains users search --schemas file://schemas.json
