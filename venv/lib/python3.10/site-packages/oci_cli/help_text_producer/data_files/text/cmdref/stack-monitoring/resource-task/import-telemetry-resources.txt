"import-telemetry-resources"
****************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Create a new stack monitoring resource task.


Usage
=====

   oci stack-monitoring resource-task import-telemetry-resources [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment identifier.

--namespace [text]

Name space to be used for OCI Native service resources discovery.

--source [text]

Source from where the metrics pushed to telemetry. Possible values:
* OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from
OCI Native Services.   * OCI_TELEMETRY_PROMETHEUS  - The metrics are
pushed to telemetry from Prometheus.

Accepted values are:

   OCI_TELEMETRY_NATIVE, OCI_TELEMETRY_PROMETHEUS


Optional Parameters
===================

--availability-proxy-metric-collection-interval [integer]

Metrics collection interval in seconds used when calculating the
availability of the resource based on metrics specified using the
property ‘availabilityProxyMetrics’.

--availability-proxy-metrics [complex type]

List of metrics to be used to calculate the availability of the
resource. Resource is considered to be up if at least one of the
specified metrics is available for the resource during the specified
interval using the property
‘availabilityProxyMetricCollectionIntervalInSeconds’. If no metrics
are specified, availability will not be calculated for the resource.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--console-path-prefix [text]

The console path prefix to use for providing service home url page
navigation. For example if the prefix provided is
‘security/bastion/bastions’, the URL used for navigation will be
https://<cloudhostname>/security/bastion/bastions/<resourceOcid>. If
not provided, service home page link will not be shown in the stack
monitoring home page.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. Example: *{“foo-namespace”: {“bar-key”: “value”}}* This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--external-id-mapping [text]

The external resource identifier property in the metric dimensions.
Resources imported will be using this property value for external id.

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only. Example: *{“bar-
key”: “value”}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--name [text]

Name of the task. If not provided by default the following names will
be taken OCI tasks - namespace plus timestamp.

--resource-group [text]

The resource group to use while fetching metrics from telemetry. If
not specified, resource group will be skipped in the list metrics
request.

--resource-name-filter [text]

The resource name filter. Resources matching with the resource name
filter will be imported. Regular expressions will be accepted.

--resource-name-mapping [text]

The resource name property in the metric dimensions. Resources
imported will be using this property value for resource name.

--resource-type-filter [text]

The resource type filter. Resources matching with the resource type
filter will be imported. Regular expressions will be accepted.

--resource-type-mapping [text]

The resource type property in the metric dimensions. Resources
imported will be using this property value for resource type. If not
specified, namespace will be used for resource type.

--service-base-url [text]

The base URL of the OCI service to which the resource belongs to. Also
this property is applicable only when source is OCI_TELEMETRY_NATIVE.

--up-status-mappings [complex type]

Lifecycle states of the external resource which reflects the status of
the resource being up. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--use-metrics-for-status [boolean]

Flag to indicate whether status is calculated using metrics or
LifeCycleState attribute of the resource in OCI service.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, NEEDS_ATTENTION, SUCCEEDED, WAITING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource-task/import-telemetry-resources.html#cmdoption-compartment-id
       export namespace=<substitute-value-of-namespace> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource-task/import-telemetry-resources.html#cmdoption-namespace
       export source=<substitute-value-of-source> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource-task/import-telemetry-resources.html#cmdoption-source

       oci stack-monitoring resource-task import-telemetry-resources --compartment-id $compartment_id --namespace $namespace --source $source
