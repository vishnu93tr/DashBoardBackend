"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Performs a partial or full update of a user-defined data associated
with the Private Endpoint.

Use UpdatePrivateEndpoint to move a Private Endpoint from one
compartment to another within the same tenancy. Supply the
compartmentID of the compartment that you want to move the Private
Endpoint to. Or use it to update the name, subnetId, endpointFqdn or
privateEndpointIp or accessTargets of the Private Endpoint. For more
information about moving resources between compartments, see Moving
Resources to a Different Compartment.

This API follows replace semantics (rather than merge semantics). That
means if the body provides values for parameters and the resource has
exisiting ones, this operation will replace those existing values.


Usage
=====

   oci os private-endpoint update [OPTIONS]


Required Parameters
===================

--pe-name [text]

The name of the private endpoint. Avoid entering confidential
information. Example: *my-new-pe-1*


Optional Parameters
===================

--access-targets [complex type]

A list of targets that can be accessed by the private endpoint.

This option is a JSON list with items of type AccessTargetDetails.
For documentation on AccessTargetDetails please see our API reference:
https://docs.cloud.oracle.com/api/#/en/objectstorage/20160918/datatyp
es/AccessTargetDetails. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{“Operations”: {“CostCenter”: “42”}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{“Department”: “Finance”}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

The entity tag (ETag) to match with the ETag of an existing resource.
If the specified ETag matches the ETag of the existing resource, GET
and HEAD requests will return the resource and PUT and POST requests
will upload the resource.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--name [text]

This name associated with the endpoint. Valid characters are uppercase
or lowercase letters, numbers, hyphens,  underscores, and periods.
Example: my-new-private-endpoint1

--namespace [text]

The Object Storage namespace which will associated with the private
endpoint.

--namespace-name [text]

The Object Storage namespace used for the request. If not provided,
this parameter will be obtained internally using a call to ‘oci os ns
get’

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, COMPLETED, FAILED, IN_PROGRESS

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export pe_name=<substitute-value-of-pe_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/os/private-endpoint/update.html#cmdoption-pe-name

       oci os private-endpoint update --pe-name $pe_name
