"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter

* Other Examples


Description
===========

Creates a new notebook session.


Usage
=====

   oci data-science notebook-session create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment where you want to create the notebook
session.

--project-id [text]

The OCID of the project to associate with the notebook session.


Optional Parameters
===================

--config-details [complex type]

Used to configure the infrastructure details of a Data Science
notebook. To use the default network configuration, omit the subnet
value. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--configuration-details [complex type]

Deprecated. Use –config-details. If you specify values for both, then
the values must match. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. See Resource Tags. Example: *{“Operations”: {“CostCenter”:
“42”}}* This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

A user-friendly display name for the resource. It does not have to be
unique and can be modified. Avoid entering confidential information.
Example: *My NotebookSession*

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. See Resource Tags.
Example: *{“Department”: “Finance”}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--notebook-session-storage-mount-configuration-details-list [complex type]

Collection of NotebookSessionStorageMountConfigurationDetails.

This option is a JSON list with items of type
StorageMountConfigurationDetails.  For documentation on
StorageMountConfigurationDetails please see our API reference: https:
//docs.cloud.oracle.com/api/#/en/datascience/20190101/datatypes/Stora
geMountConfigurationDetails. This is a complex type whose value must
be valid JSON. The value can be provided as a string on the command
line or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--runtime-config-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-science/project/create.html#cmdoption-compartment-id

       project_id=$(oci data-science project create --compartment-id $compartment_id --query data.id --raw-output)

       oci data-science notebook-session create --compartment-id $compartment_id --project-id $project_id


Other Examples
==============


Description
-----------

Create notebook session using default networking


Command
-------

    oci data-science notebook-session create -c $compartment_ocid --project-id $project_ocid --config-details file://details.json


Output
------

   {
    "data": {
         "compartment-id": "$compartment_ocid",
         "created-by": "$user_ocid",
         "display-name": "$display_name",
         "id": "$notebook_session_ocid",
         "lifecycle-state": "CREATING",
         "notebook-session-config-details": {
              "block-storage-size-in-gbs": 50,
              "shape": "VM.Standard2.1"
         },
         "notebook-session-url": "$notebook_session_url  ",
         "project-id": "$project_ocid",
         "time-created": "2022-01-14T17:43:04.357000+00:00"
    }
   }


Description
-----------

Create notebook session using custom networking


Command
-------

    oci data-science notebook-session create -c $compartment_ocid --project-id $project_ocid --config-details | --configuration-details file://details.json


Output
------

   {
    "data": {
         "compartment-id": "$compartment_ocid",
         "created-by": "$user_ocid",
         "display-name": "$display_name",
         "id": "$notebook_session_ocid",
         "lifecycle-state": "CREATING",
         "notebook-session-config-details": {
              "block-storage-size-in-gbs": 50,
              "shape": "VM.Standard2.1",
              "subnet-id": "subnet_ocid"
         },
         "notebook-session-configuration-details": {
              "block-storage-size-in-gbs": 50,
              "shape": "VM.Standard2.1",
              "subnet-id": "$subnet_ocid"
         },
         "notebook-session-url": "$notebook_session_url",
         "project-id": "$project_ocid",
         "time-created": "2022-01-14T17:46:42.421000+00:00"
    }
   }
