"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates the health check policy for a given network load balancer and
backend set.


Usage
=====

   oci nlb health-checker update [OPTIONS]


Required Parameters
===================

--backend-set-name [text]

The name of the backend set associated with the health check policy to
be retrieved.

Example:

   example_backend_set

--network-load-balancer-id [text]

The OCID of the network load balancer to update.


Optional Parameters
===================

--dns [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--force

Perform update without prompting for confirmation.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the current
etag value of the resource.

--interval-in-millis [integer]

The interval between health checks, in milliseconds.

Example:

   10000

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--port [integer]

The backend server port against which to run the health check.

Example:

   8080

--protocol [text]

The protocol that the health check must use; either HTTP, UDP, or TCP.

Example:

   HTTP

Accepted values are:

   DNS, HTTP, HTTPS, TCP, UDP

--request-data [text]

Base64 encoded pattern to be sent as UDP or TCP health check probe.

--response-body-regex [text]

A regular expression for parsing the response body from the backend
server.

Example:

   ^((?!false).|\s)*$

--response-data [text]

Base64 encoded pattern to be validated as UDP or TCP health check
probe response.

--retries [integer]

The number of retries to attempt before a backend server is considered
“unhealthy”. This number also applies when recovering a server to the
“healthy” state.

Example:

   3

--return-code [integer]

The status code a healthy backend server should return. If you
configure the health check policy to use the HTTP protocol, then you
can use common HTTP status codes such as “200”.

Example:

   200

--timeout-in-millis [integer]

The maximum time, in milliseconds, to wait for a reply to a health
check. A health check is successful only if a reply returns within
this timeout period.

Example:

   3000

--url-path [text]

The path against which to run the health check.

Example:

   /healthcheck

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/network-load-balancer/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/network-load-balancer/create.html#cmdoption-display-name
       export subnet_id=<substitute-value-of-subnet_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/network-load-balancer/create.html#cmdoption-subnet-id
       export backend_set_name=<substitute-value-of-backend_set_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/health-checker/update.html#cmdoption-backend-set-name

       network_load_balancer_id=$(oci nlb network-load-balancer create --compartment-id $compartment_id --display-name $display_name --subnet-id $subnet_id --query data.id --raw-output)

       oci nlb health-checker update --backend-set-name $backend_set_name --network-load-balancer-id $network_load_balancer_id
