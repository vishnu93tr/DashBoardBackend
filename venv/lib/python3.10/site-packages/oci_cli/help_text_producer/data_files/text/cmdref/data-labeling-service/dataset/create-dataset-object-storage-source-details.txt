"create-dataset-object-storage-source-details"
**********************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new Dataset.


Usage
=====

   oci data-labeling-service dataset create-dataset-object-storage-source-details [OPTIONS]


Required Parameters
===================

--annotation-format [text]

The annotation format name required for labeling records.

--compartment-id, -c [text]

The OCID of the compartment of the resource.

--dataset-format-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--dataset-source-details-bucket [text]

The object storage bucket that contains the dataset data source.

--dataset-source-details-namespace [text]

The namespace of the bucket that contains the dataset data source.

--label-set [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--dataset-source-details-prefix [text]

A common path prefix shared by the objects that make up the dataset.
Except for the CSV file type, records are not generated for the
objects whose names exactly match with the prefix.

--defined-tags [complex type]

The defined tags for this resource. Each key is predefined and scoped
to a namespace. For example: *{“foo-namespace”: {“bar-key”: “value”}}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

A user provided description of the dataset

--display-name [text]

A user-friendly display name for the resource.

--freeform-tags [complex type]

A simple key-value pair that is applied without any predefined name,
type, or scope. It exists for cross-compatibility only. For example:
*{“bar-key”: “value”}* This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--initial-import-dataset-configuration [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--initial-record-generation-configuration [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--labeling-instructions [text]

The labeling instructions for human labelers in rich text format

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED, WAITING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci data-labeling-service dataset create-dataset-object-storage-source-details --generate-param-json-input dataset-format-details > dataset-format-details.json
       oci data-labeling-service dataset create-dataset-object-storage-source-details --generate-param-json-input label-set > label-set.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export annotation_format=<substitute-value-of-annotation_format> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-labeling-service/dataset/create-dataset-object-storage-source-details.html#cmdoption-annotation-format
       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-labeling-service/dataset/create-dataset-object-storage-source-details.html#cmdoption-compartment-id
       export dataset_source_details_bucket=<substitute-value-of-dataset_source_details_bucket> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-labeling-service/dataset/create-dataset-object-storage-source-details.html#cmdoption-dataset-source-details-bucket
       export dataset_source_details_namespace=<substitute-value-of-dataset_source_details_namespace> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-labeling-service/dataset/create-dataset-object-storage-source-details.html#cmdoption-dataset-source-details-namespace

       oci data-labeling-service dataset create-dataset-object-storage-source-details --annotation-format $annotation_format --compartment-id $compartment_id --dataset-format-details file://dataset-format-details.json --dataset-source-details-bucket $dataset_source_details_bucket --dataset-source-details-namespace $dataset_source_details_namespace --label-set file://label-set.json
