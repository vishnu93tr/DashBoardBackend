"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates the properties of the specified DB system.

**Note:** Deprecated for Exadata Cloud Service systems. Use the new
resource model APIs instead.

For Exadata Cloud Service instances, support for this API will end on
May 15th, 2021. See Switching an Exadata DB System to the New Resource
Model and APIs for details on converting existing Exadata DB systems
to the new resource model.


Usage
=====

   oci db system update [OPTIONS]


Required Parameters
===================

--db-system-id [text]

The DB system OCID.


Optional Parameters
===================

--backup-network-nsg-ids [complex type]

A list of the OCIDs of the network security groups (NSGs) that the
backup network of this DB system belongs to. Setting this to an empty
array after the list is created removes the resource from all NSGs.
For more information about NSGs, see Security Rules. Applicable only
to Exadata systems. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--cpu-core-count [integer]

The new number of CPU cores to set for the DB system. Not applicable
for INTEL based virtual machine DB systems.

--data-storage-size-in-gbs [integer]

The size, in gigabytes, to scale the attached storage up to for this
virtual machine DB system. This value must be greater than current
storage size. Note that the resulting total storage size attached will
be greater than the amount requested to allow for REDO/RECO space and
software volume. Applies only to virtual machine DB systems.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource.  The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--is-diagnostics-events-enabled [boolean]

Enables customer to receive Events service notifications for guest VM
issues

--is-health-monitoring-enabled [boolean]

Enables Oracle to receive diagnostic data and share it with its
operations and support personnel

--is-incident-logs-enabled [boolean]

Enables Oracle to receive Events service notifications for guest VM
issues, collect incident logs and traces

--license-model [text]

The Oracle Database license model that applies to all databases on the
DB system. The default is LICENSE_INCLUDED.

Accepted values are:

   BRING_YOUR_OWN_LICENSE, LICENSE_INCLUDED

--maintenance-window-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--nsg-ids [complex type]

The list of OCIDs for the network security groups (NSGs) to which this
resource belongs. Setting this to an empty list removes all resources
from all NSGs. For more information about NSGs, see Security Rules.
**NsgIds restrictions:** - A network security group (NSG) is optional
for Autonomous Databases with private access. The nsgIds list can be
empty. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--patch-action [text]

The action to perform on the patch.

--patch-id [text]

The OCID of the patch.

--reco-storage-size-in-gbs [integer]

The size, in gigabytes, to scale the attached RECO storage up to for
this virtual machine DB system. This value must be greater than
current storage size. Note that the resulting total storage size
attached will be greater than the amount requested to allow for the
software volume. Applies only to virtual machine DB systems.

--security-attributes [complex type]

Security Attributes for this resource. Each key is predefined and
scoped to a namespace. For more information, see Resource Tags.
Example: *{“Oracle-ZPR”: {“MaxEgressCount”: {“value”: “42”, “mode”:
“audit”}}}* This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--shape [text]

The shape of the DB system. The shape determines resources allocated
to the DB system. - For virtual machine shapes, the number of CPU
cores and memory

To get a list of shapes, use the ListDbSystemShapes operation.

--ssh-authorized-keys-file [filename]

A file containing one or more public SSH keys to use for SSH access to
the DB System. Use a newline character to separate multiple keys. The
length of the combined keys cannot exceed 10,000 characters.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   AVAILABLE, FAILED, MAINTENANCE_IN_PROGRESS, MIGRATED, NEEDS_ATTENTION, PROVISIONING, TERMINATED, TERMINATING, UPDATING, UPGRADING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export db_system_id=<substitute-value-of-db_system_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/db/system/update.html#cmdoption-db-system-id

       oci db system update --db-system-id $db_system_id
