"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Adds a backend set to a network load balancer.


Usage
=====

   oci nlb backend-set create [OPTIONS]


Required Parameters
===================

--health-checker [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--name [text]

A user-friendly name for the backend set that must be unique and
cannot be changed.

Valid backend set names include only alphanumeric characters, dashes,
and underscores. Backend set names cannot contain spaces. Avoid
entering confidential information.

Example:

   example_backend_set

--network-load-balancer-id [text]

The OCID of the network load balancer to update.

--policy [text]

The network load balancer policy for the backend set.

Example:

   FIVE_TUPLE

Accepted values are:

   FIVE_TUPLE, THREE_TUPLE, TWO_TUPLE


Optional Parameters
===================

--are-operationally-active-backends-preferred [boolean]

If enabled, NLB supports active-standby backends. The standby backend
takes over the traffic when the active node fails, and continues to
serve the traffic even when the old active node is back healthy.

--backends [complex type]

An array of backends to be associated with the backend set.

This option is a JSON list with items of type BackendDetails.  For
documentation on BackendDetails please see our API reference: https:/
/docs.cloud.oracle.com/api/#/en/networkloadbalancer/20200501/datatype
s/BackendDetails. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the current
etag value of the resource.

--ip-version [text]

IP version associated with the backend set.

Accepted values are:

   IPV4, IPV6

--is-fail-open [boolean]

If enabled, the network load balancer will continue to distribute
traffic in the configured distribution in the event all backends are
unhealthy. The value is false by default.

--is-instant-failover-enabled [boolean]

If enabled existing connections will be forwarded to an alternative
healthy backend as soon as current backend becomes unhealthy.

--is-instant-failover-tcp-reset-enabled [boolean]

If enabled along with instant failover, the network load balancer will
send TCP RST to the clients for the existing connections instead of
failing over to a healthy backend. This only applies when using the
instant failover. By default, TCP RST is enabled.

--is-preserve-source [boolean]

If this parameter is enabled, then the network load balancer preserves
the source IP of the packet when it is forwarded to backends. Backends
see the original source IP. If the isPreserveSourceDestination
parameter is enabled for the network load balancer resource, then this
parameter cannot be disabled. The value is true by default.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci nlb backend-set create --generate-param-json-input health-checker > health-checker.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/network-load-balancer/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/network-load-balancer/create.html#cmdoption-display-name
       export subnet_id=<substitute-value-of-subnet_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/network-load-balancer/create.html#cmdoption-subnet-id
       export policy=<substitute-value-of-policy> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/nlb/backend-set/create.html#cmdoption-policy

       network_load_balancer_id=$(oci nlb network-load-balancer create --compartment-id $compartment_id --display-name $display_name --subnet-id $subnet_id --query data.id --raw-output)

       oci nlb backend-set create --health-checker file://health-checker.json --name $name --network-load-balancer-id $network_load_balancer_id --policy $policy
