"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter

* Other Examples


Description
===========

Updates the Compute Cloud@Customer upgrade schedule.


Usage
=====

   oci ccc upgrade-schedule update [OPTIONS]


Required Parameters
===================

--upgrade-schedule-id [text]

Compute Cloud@Customer upgrade schedule OCID.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. Example: *{“foo-namespace”: {“bar-key”: “value”}}* This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

An optional description of the Compute Cloud@Customer upgrade
schedule. Avoid entering confidential information.

--display-name [text]

Compute Cloud@Customer upgrade schedule display name. Avoid entering
confidential information.

--events [complex type]

List of preferred times for a Compute Cloud@Customer infrastructure to
be upgraded.

This option is a JSON list with items of type UpdateCccScheduleEvent.
For documentation on UpdateCccScheduleEvent please see our API
reference: https://docs.cloud.oracle.com/api/#/en/computecloudatcusto
mer/20221208/datatypes/UpdateCccScheduleEvent. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only. Example: *{“bar-
key”: “value”}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, DELETED, FAILED, NEEDS_ATTENTION

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci ccc upgrade-schedule create --generate-param-json-input events > events.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/ccc/upgrade-schedule/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/ccc/upgrade-schedule/create.html#cmdoption-display-name

       upgrade_schedule_id=$(oci ccc upgrade-schedule create --compartment-id $compartment_id --display-name $display_name --events file://events.json --query data.id --raw-output)

       oci ccc upgrade-schedule update --upgrade-schedule-id $upgrade_schedule_id


Other Examples
==============


Description
-----------

Updates a Compute Cloud@Customer upgrade schedule by the specified
OCID with an updated display-name. Avoid entering confidential
information.


Command
-------

    oci ccc upgrade-schedule update --upgrade-schedule-id <upgrade_schedule_OCID> --display-name TestUpgradeSchedule3


Output
------

   {
    "data": {
         "compartment-id": "<compartment_OCID>",
         "defined-tags": {
              "Oracle-Tags": {
                   "CreatedBy": "user",
                   "CreatedOn": "2023-07-04T10:47:24.873Z"
              }
         },
         "description": "null",
         "display-name": "TestUpgradeSchedule3",
         "events": [
              {
                   "description": "event1",
                   "name": "51bd3445-9c36-4435-bd35-9f952e9105e6",
                   "schedule-event-duration": "PT49H",
                   "schedule-event-recurrences": "FREQ=MONTHLY",
                   "time-start": "2023-07-15T00:00:00+00:00"
              },
              {
                   "description": "event2",
                   "name": "b4462ecc-f170-4460-bd22-6f52273d3f69",
                   "schedule-event-duration": "PT30H",
                   "schedule-event-recurrences": "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH;BYHOUR=10;INTERVAL=1",
                   "time-start": "2023-07-05T00:00:00+00:00"
              }
         ],
         "freeform-tags": {},
         "id": "<upgrade_schedule_OCID>",
         "infrastructure-ids": "null",
         "lifecycle-details": "null",
         "lifecycle-state": "ACTIVE",
         "system-tags": {},
         "time-created": "2023-07-04T10:47:25.090000+00:00",
         "time-updated": "2023-07-05T08:20:03.839000+00:00"
    }
   }


Description
-----------

Updates a new Compute Cloud@Customer upgrade schedule (event) in the
specified compartment. Avoid entering confidential information.–events
requires valid JSON. The value can be provided as a string on the
command line or passed in a file using the file://<path-to-file>
syntax.You can use the –generate-param-json-input option to generate
an example of the JSON that must be provided. Store this example in a
file, modify it as needed, then pass it to the command line using the
file://<path-to-file> syntax.


Command
-------

    oci ccc upgrade-schedule update --upgrade-schedule-id <upgrade_schedule_OCID> --events file://events.json


Output
------

   {
    "data": {
         "compartment-id": "<compartment_OCID>",
         "defined-tags": {
              "Oracle-Tags": {
                   "CreatedBy": "user",
                   "CreatedOn": "2023-07-04T10:47:24.873Z"
              }
         },
         "description": "null",
         "display-name": "TestUpgradeSchedule3",
         "events": [
              {
                   "description": "event1",
                   "name": "58ca4897-f9df-4cb8-95da-62f50e4c6d84",
                   "schedule-event-duration": "PT49H",
                   "schedule-event-recurrences": "FREQ=MONTHLY;INTERVAL=2",
                   "time-start": "2023-07-15T00:00:00+00:00"
              },
              {
                   "description": "event2",
                   "name": "a6b0e5a9-c828-4768-9701-4445c3bfebab",
                   "schedule-event-duration": "PT30H",
                   "schedule-event-recurrences": "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH;BYHOUR=10;INTERVAL=1",
                   "time-start": "2023-07-05T00:00:00+00:00"
              }
         ],
         "freeform-tags": {},
         "id": "<upgrade_schedule_OCID>",
         "infrastructure-ids": "null",
         "lifecycle-details": "null",
         "lifecycle-state": "ACTIVE",
         "system-tags": {},
         "time-created": "2023-07-04T10:47:25.090000+00:00",
         "time-updated": "2023-07-05T08:31:54.782000+00:00"
    },
    "output": "WARNING: Updates to events and freeform-tags and defined-tags will replace any existing values. Are you sure you want to continue? [y/N]"
   }
