"create-sql-metric-ext"
***********************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new metric extension resource for a given compartment


Usage
=====

   oci stack-monitoring metric-extension create-sql-metric-ext [OPTIONS]


Required Parameters
===================

--collection-schedule [text]

Schedule of metric extension should use RFC 5545 format i.e. recur-
rule-part = “FREQ”;INTERVAL where FREQ rule part identifies the type
of recurrence rule. Valid values are “MINUTELY”,”HOURLY”,”DAILY” to
specify repeating events based on an interval of a minute, an hour and
a day or more. Example- FREQ=DAILY;INTERVAL=1

--compartment-id, -c [text]

Compartment Identifier OCID

--display-name [text]

Metric Extension display name.

--metric-list [complex type]

List of metrics which are part of this metric extension This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--name [text]

Metric Extension Resource name.

--resource-type [text]

Resource type to which Metric Extension applies

--sql-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--sql-type [text]

Type of SQL data collection method i.e. either a Statement or SQL
Script File

Accepted values are:

   SQL_SCRIPT, STATEMENT


Optional Parameters
===================

--description [text]

Description of the metric extension.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--in-param-details [complex type]

List of values and position of PL/SQL procedure IN parameters

This option is a JSON list with items of type SqlInParamDetails.  For
documentation on SqlInParamDetails please see our API reference: http
s://docs.cloud.oracle.com/api/#/en/stackmonitoring/20210330/datatypes
/SqlInParamDetails. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--out-param-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, DELETED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci stack-monitoring metric-extension create-sql-metric-ext --generate-param-json-input metric-list > metric-list.json
       oci stack-monitoring metric-extension create-sql-metric-ext --generate-param-json-input sql-details > sql-details.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource-type/create.html#cmdoption-compartment-id
       export name=<substitute-value-of-name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource-type/create.html#cmdoption-name
       export collection_schedule=<substitute-value-of-collection_schedule> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/metric-extension/create-sql-metric-ext.html#cmdoption-collection-schedule
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/metric-extension/create-sql-metric-ext.html#cmdoption-display-name
       export sql_type=<substitute-value-of-sql_type> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/metric-extension/create-sql-metric-ext.html#cmdoption-sql-type

       resource_type_id=$(oci stack-monitoring resource-type create --compartment-id $compartment_id --name $name --query data.id --raw-output)

       oci stack-monitoring metric-extension create-sql-metric-ext --collection-schedule $collection_schedule --compartment-id $compartment_id --display-name $display_name --metric-list file://metric-list.json --name $name --resource-type $resource_type --sql-details file://sql-details.json --sql-type $sql_type
