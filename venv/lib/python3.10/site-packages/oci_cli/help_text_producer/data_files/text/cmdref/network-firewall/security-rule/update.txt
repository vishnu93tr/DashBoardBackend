"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates the Security Rule with the given name in the network firewall
policy.


Usage
=====

   oci network-firewall security-rule update [OPTIONS]


Required Parameters
===================

--action [text]

Types of Action on the Traffic flow.

* ALLOW - Allows the traffic.   * DROP - Silently drops the traffic,
  e.g. without sending a TCP reset.   * REJECT - Rejects the traffic,
  sending a TCP reset to client and/or server as applicable.   *
  INSPECT - Inspects traffic for vulnerability as specified in
  *inspection*, which may result in rejection.

Accepted values are:

   ALLOW, DROP, INSPECT, REJECT

--condition [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--network-firewall-policy-id [text]

Unique Network Firewall Policy identifier

--security-rule-name [text]

Unique identifier for Security Rules in the network firewall policy.


Optional Parameters
===================

--force

Perform update without prompting for confirmation.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--inspection [text]

Type of inspection to affect the Traffic flow. This is only applicable
if action is INSPECT.

* INTRUSION_DETECTION - Intrusion Detection.   * INTRUSION_PREVENTION
  - Intrusion Detection and Prevention. Traffic classified as
  potentially malicious will be rejected as described in *type*.

Accepted values are:

   INTRUSION_DETECTION, INTRUSION_PREVENTION

--position [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci network-firewall security-rule update --generate-param-json-input condition > condition.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network-firewall/network-firewall-policy/create.html#cmdoption-compartment-id
       export action=<substitute-value-of-action> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network-firewall/security-rule/update.html#cmdoption-action
       export security_rule_name=<substitute-value-of-security_rule_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network-firewall/security-rule/update.html#cmdoption-security-rule-name

       network_firewall_policy_id=$(oci network-firewall network-firewall-policy create --compartment-id $compartment_id --query data.id --raw-output)

       oci network-firewall security-rule update --action $action --condition file://condition.json --network-firewall-policy-id $network_firewall_policy_id --security-rule-name $security_rule_name
