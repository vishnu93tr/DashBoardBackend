"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a boot disk image for the specified instance or imports an
exported image from the Oracle Cloud Infrastructure Object Storage
service.

When creating a new image, you must provide the OCID of the instance
you want to use as the basis for the image, and the OCID of the
compartment containing that instance. For more information about
images, see Managing Custom Images.

When importing an exported image from Object Storage, you specify the
source information in ImageSourceDetails.

When importing an image based on the namespace, bucket name, and
object name, use ImageSourceViaObjectStorageTupleDetails.

When importing an image based on the Object Storage URL, use
ImageSourceViaObjectStorageUriDetails. See Object Storage URLs and
Using Pre-Authenticated Requests for constructing URLs for image
import/export.

For more information about importing exported images, see Image
Import/Export.

You may optionally specify a *display name* for the image, which is
simply a friendly name or description. It does not have to be unique,
and you can change it. See UpdateImage. Avoid entering confidential
information.


Usage
=====

   oci compute image create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment you want the image to be created in.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags.

Example:

   {"Operations": {"CostCenter": "42"}}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

A user-friendly name for the image. It does not have to be unique, and
it’s changeable. Avoid entering confidential information.

You cannot use a platform image name as a custom image name.

Example:

   My Oracle Linux image

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--image-source-details [complex type]

[DEPRECATED] The use of the *oci compute image create* command to
import an image from Object Storage is deprecated.

 Please use the *oci compute image import* command instead.

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

Example:

   '{ "objectName": "image-to-import.qcow2", "bucketName": "MyBucket", "namespaceName": "MyNamespace", "sourceType": "objectStorageTuple" }'

or

‘{ “sourceUri”: “https://objectstorage.us-
phoenix-1.oraclecloud.com/n/MyNamespace/b/MyBucket/o/image-to-
import.qcow2”, “sourceType”: “objectStorageUri” }’

--instance-id [text]

The OCID of the instance you want to use as the basis for the image.

--launch-mode [text]

Specifies the configuration mode for launching virtual machine (VM)
instances. The configuration modes are: * *NATIVE* - VM instances
launch with iSCSI boot and VFIO devices. The default value for
platform images. * *EMULATED* - VM instances launch with emulated
devices, such as the E1000 network driver and emulated SCSI disk
controller. * *PARAVIRTUALIZED* - VM instances launch with
paravirtualized devices using VirtIO drivers. * *CUSTOM* - VM
instances launch with custom configuration settings specified in the
*LaunchOptions* parameter.

Accepted values are:

   CUSTOM, EMULATED, NATIVE, PARAVIRTUALIZED

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   AVAILABLE, DELETED, DISABLED, EXPORTING, IMPORTING, PROVISIONING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"
