"upload-package"
****************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Upload ML Application Package


Usage
=====

   oci data-science ml-app-implementation upload-package [OPTIONS]


Required Parameters
===================

--ml-app-implementation-id [text]

unique MlApplicationImplementation identifier

--ml-app-package-file [filename]

The package artifact to upload.


Optional Parameters
===================

--content-disposition [text]

This header allows you to specify a filename during upload. This file
name is used to dispose of the file contents while downloading the
file. If this optional field is not populated in the request, then the
OCID of the model is used for the file name when downloading. Example:
*{“Content-Disposition”: “attachment”
“filename”=”model.tar.gz”            “Content-Length”: “2347”
“Content-Type”: “application/gzip”}*

--content-length [integer]

The content length of the body.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--opc-ml-app-package-args [text]

List of arguments (Json map - argument name to argument value) for ML
Application package (available arguments are in ML Application package
descriptor). E.g. {“vcnId”: “ocid1.vcn.oc1.iad.abcd…”,
“logId”:”ocid1.log.oc1.iad.abcd…”}

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-science/ml-app/create.html#cmdoption-compartment-id
       export name=<substitute-value-of-name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-science/ml-app/create.html#cmdoption-name
       export ml_app_package_file=<substitute-value-of-ml_app_package_file> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-science/ml-app-implementation/upload-package.html#cmdoption-ml-app-package-file

       ml_app_id=$(oci data-science ml-app create --compartment-id $compartment_id --name $name --query data.id --raw-output)

       ml_app_implementation_id=$(oci data-science ml-app-implementation create --compartment-id $compartment_id --ml-app-id $ml_app_id --name $name --query data.id --raw-output)

       oci data-science ml-app-implementation upload-package --ml-app-implementation-id $ml_app_implementation_id --ml-app-package-file $ml_app_package_file
