"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates the zone with the specified information.

Global secondary zones may have their external masters updated. For
more information about secondary zones, see Manage DNS Service Zone.
When the zone name is provided as a path parameter and *PRIVATE* is
used for the scope query parameter then the viewId query parameter is
required.


Usage
=====

   oci dns zone update [OPTIONS]


Required Parameters
===================

--zone-name-or-id [text]

The name or OCID of the target zone.


Optional Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment the zone belongs to.

This parameter is deprecated and should be omitted.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags.

   **Example:** *{“Operations”: {“CostCenter”: “42”}}*

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--dnssec-state [text]

The state of DNSSEC on the zone.

For DNSSEC to function, every parent zone in the DNS tree up to the
top-level domain (or an independent trust anchor) must also have
DNSSEC correctly set up. After enabling DNSSEC, you must add a DS
record to the zone’s parent zone containing the *KskDnssecKeyVersion*
data. You can find the DS data in the *dsData* attribute of the
*KskDnssecKeyVersion*. Then, use the *PromoteZoneDnssecKeyVersion*
operation to promote the *KskDnssecKeyVersion*.

New *KskDnssecKeyVersion`s are generated annually, a week before the
existing `KskDnssecKeyVersion*’s expiration. To rollover a
*KskDnssecKeyVersion*, you must replace the parent zone’s DS record
containing the old *KskDnssecKeyVersion* data with the data from the
new *KskDnssecKeyVersion*.

To remove the old DS record without causing service disruption, wait
until the old DS record’s TTL has expired, and the new DS record has
propagated. After the DS replacement has been completed, then the
*PromoteZoneDnssecKeyVersion* operation must be called.

Metrics are emitted in the *oci_dns* namespace daily for each
*KskDnssecKeyVersion* indicating how many days are left until
expiration. We recommend that you set up alarms and notifications for
KskDnssecKeyVersion expiration so that the necessary parent zone
updates can be made and the *PromoteZoneDnssecKeyVersion* operation
can be called.

Enabling DNSSEC results in additional records in DNS responses which
increases their size and can cause higher response latency.

For more information, see DNSSEC.

Accepted values are:

   DISABLED, ENABLED

--external-downstreams [complex type]

External secondary servers for the zone. This field is currently not
supported when *zoneType* is *SECONDARY* or *scope* is *PRIVATE*.

This option is a JSON list with items of type ExternalDownstream.  For
documentation on ExternalDownstream please see our API reference: htt
ps://docs.cloud.oracle.com/api/#/en/dns/20180115/datatypes/ExternalDo
wnstream. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--external-masters [complex type]

External master servers for the zone. *externalMasters* becomes a
required parameter when the *zoneType* value is *SECONDARY*.

This option is a JSON list with items of type ExternalMaster.  For
documentation on ExternalMaster please see our API reference: https:/
/docs.cloud.oracle.com/api/#/en/dns/20180115/datatypes/ExternalMaster.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

   **Example:** *{“Department”: “Finance”}*

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

The *If-Match* header field makes the request method conditional on
the existence of at least one current representation of the target
resource, when the field-value is ***, or having a current
representation of the target resource that has an entity-tag matching
a member of the list of entity-tags provided in the field-value.

--if-unmodified-since [text]

The *If-Unmodified-Since* header field makes the request method
conditional on the selected representation’s last modification date
being earlier than or equal to the date provided in the field-value.
This field accomplishes the same purpose as If-Match for cases where
the user agent does not have an entity-tag for the representation.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--scope [text]

Specifies to operate only on resources that have a matching DNS scope.

Accepted values are:

   GLOBAL, PRIVATE

--view-id [text]

The OCID of the view the zone is associated with. Required when
accessing a private zone by name.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING, FAILED, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export zone_name_or_id=<substitute-value-of-zone_name_or_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/dns/zone/update.html#cmdoption-zone-name-or-id

       oci dns zone update --zone-name-or-id $zone_name_or_id
