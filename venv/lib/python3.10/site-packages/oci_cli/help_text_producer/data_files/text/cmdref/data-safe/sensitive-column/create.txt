"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new sensitive column in the specified sensitive data model.


Usage
=====

   oci data-safe sensitive-column create [OPTIONS]


Required Parameters
===================

--column-name [text]

The name of the sensitive column.

--object-name [text]

The database object that contains the sensitive column.

--schema-name [text]

The database schema that contains the sensitive column.

--sensitive-data-model-id [text]

The OCID of the sensitive data model.


Optional Parameters
===================

--app-defined-child-column-keys [complex type]

Unique keys identifying the columns that are application-level (non-
dictionary) children of the sensitive column. This attribute can be
used to establish relationship between columns in a sensitive data
model. Note that the child columns must be added to the sensitive data
model before their keys can be specified here. If this attribute is
provided, the parentColumnKeys and relationType attributes of the
child columns are automatically updated to reflect the relationship.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--app-name [text]

The name of the application associated with the sensitive column. It’s
useful when the application name is different from the schema name.
Otherwise, it can be ignored. If this attribute is not provided, it’s
automatically populated with the value provided for the schemaName
attribute.

--data-type [text]

The data type of the sensitive column.

--db-defined-child-column-keys [complex type]

Unique keys identifying the columns that are database-level
(dictionary-defined) children of the sensitive column. This attribute
can be used to establish relationship between columns in a sensitive
data model. Note that the child columns must be added to the sensitive
data model before their keys can be specified here. If this attribute
is provided, the parentColumnKeys and relationType attributes of the
child columns are automatically updated to reflect the relationship.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--object-type [text]

The type of the database object that contains the sensitive column.

Accepted values are:

   EDITIONING_VIEW, TABLE

--parent-column-keys [complex type]

Unique keys identifying the columns that are parents of the sensitive
column. At present, it accepts only one parent column key. This
attribute can be used to establish relationship between columns in a
sensitive data model. Note that the parent column must be added to the
sensitive data model before its key can be specified here. If this
attribute is provided, the appDefinedChildColumnKeys or
dbDefinedChildColumnKeys attribute of the parent column is
automatically updated to reflect the relationship. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--relation-type [text]

The type of referential relationship the sensitive column has with its
parent. NONE indicates that the sensitive column does not have a
parent. DB_DEFINED indicates that the relationship is defined in the
database dictionary. APP_DEFINED indicates that the relationship is
defined at the application level and not in the database dictionary.

Accepted values are:

   APP_DEFINED, DB_DEFINED, NONE

--sensitive-type-id [text]

The OCID of the sensitive type to be associated with the sensitive
column.

--status [text]

The status of the sensitive column. VALID means the column is
considered sensitive. INVALID means the column is not considered
sensitive. Tracking invalid columns in a sensitive data model helps
ensure that an incremental data discovery job does not identify these
columns as sensitive.

Accepted values are:

   INVALID, VALID

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED, SUSPENDED, SUSPENDING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/sensitive-data-model/create.html#cmdoption-compartment-id
       export target_id=<substitute-value-of-target_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/sensitive-data-model/create.html#cmdoption-target-id
       export column_name=<substitute-value-of-column_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/sensitive-column/create.html#cmdoption-column-name
       export object_name=<substitute-value-of-object_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/sensitive-column/create.html#cmdoption-object-name
       export schema_name=<substitute-value-of-schema_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/sensitive-column/create.html#cmdoption-schema-name

       sensitive_data_model_id=$(oci data-safe sensitive-data-model create --compartment-id $compartment_id --target-id $target_id --query data.id --raw-output)

       oci data-safe sensitive-column create --column-name $column_name --object-name $object_name --schema-name $schema_name --sensitive-data-model-id $sensitive_data_model_id
