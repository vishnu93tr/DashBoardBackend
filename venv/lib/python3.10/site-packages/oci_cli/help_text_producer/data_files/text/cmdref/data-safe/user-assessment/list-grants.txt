"list-grants"
*************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Gets a list of grants for a particular user in the specified user
assessment. A user grant contains details such as the privilege name,
type, category, and depth level. The depth level indicates how deep in
the hierarchy of roles granted to roles a privilege grant is. The
userKey in this operation is a system-generated identifier. Perform
the operation ListUsers to get the userKey for a particular user.


Usage
=====

   oci data-safe user-assessment list-grants [OPTIONS]


Required Parameters
===================

--user-assessment-id [text]

The OCID of the user assessment.

--user-key [text]

The unique user key. This is a system-generated identifier. ListUsers
gets the user key for a user.


Optional Parameters
===================

--all

Fetches all pages of results. If you provide this option, then you
cannot provide the "--limit" option.

--depth-level [integer]

A filter to return only items that match the specified user grant
depth level.

--depth-level-greater-than-or-equal-to [integer]

A filter to return only items that are at a level greater than or
equal to the specified user grant depth level.

--depth-level-less-than [integer]

A filter to return only items that are at a level less than the
specified user grant depth level.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--grant-key [text]

A filter to return only items that match the specified user grant key.

--grant-name [text]

A filter to return only items that match the specified user grant
name.

--limit [integer]

For list pagination. The maximum number of items to return per page in
a paginated “List” call. For details about how pagination works, see
List Pagination.

--page [text]

For list pagination. The page token representing the page at which to
start retrieving results. It is usually retrieved from a previous
“List” call. For details about how pagination works, see List
Pagination.

--page-size [integer]

When fetching results, the number of results to fetch per call. Only
valid when used with "--all" or "--limit", and ignored otherwise.

--privilege-category [text]

A filter to return only items that match the specified user privilege
category.

--privilege-type [text]

A filter to return only items that match the specified privilege grant
type.

--sort-by [text]

The field to sort by. You can specify only one sort order (sortOrder).
The default order for grantName is ascending.

Accepted values are:

   depthLevel, grantName, grantType, key, privilegeCategory

--sort-order [text]

The sort order to use, either ascending (ASC) or descending (DESC).

Accepted values are:

   ASC, DESC


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/user-assessment/create.html#cmdoption-compartment-id
       export target_id=<substitute-value-of-target_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/user-assessment/create.html#cmdoption-target-id
       export user_key=<substitute-value-of-user_key> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/user-assessment/list-grants.html#cmdoption-user-key

       user_assessment_id=$(oci data-safe user-assessment create --compartment-id $compartment_id --target-id $target_id --query data.id --raw-output)

       oci data-safe user-assessment list-grants --user-assessment-id $user_assessment_id --user-key $user_key
