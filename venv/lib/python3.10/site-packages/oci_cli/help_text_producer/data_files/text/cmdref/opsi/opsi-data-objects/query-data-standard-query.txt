"query-data-standard-query"
***************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Queries an OPSI data object with the inputs provided and sends the
result set back. Either analysisTimeInterval or timeIntervalStart and
timeIntervalEnd parameters need to be passed as well.


Usage
=====

   oci opsi opsi-data-objects query-data-standard-query [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment.


Optional Parameters
===================

--data-object-identifier [text]

Unique OPSI data object identifier.

--data-objects [complex type]

Details of OPSI data objects used in the query.

This option is a JSON list with items of type
OpsiDataObjectDetailsInQuery.  For documentation on
OpsiDataObjectDetailsInQuery please see our API reference: https://do
cs.cloud.oracle.com/api/#/en/operationsinsights/20200630/datatypes/Op
siDataObjectDetailsInQuery. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--limit [integer]

For list pagination. The maximum number of results per page, or items
to return in a paginated “List” call. For important details about how
pagination works, see List Pagination. Example: *50*

--page [text]

For list pagination. The value of the *opc-next-page* response header
from the previous “List” call. For important details about how
pagination works, see List Pagination.

--query-bind-params [complex type]

List of bind parameters to be applied in the query.

This option is a JSON list with items of type DataObjectBindParameter.
For documentation on DataObjectBindParameter please see our API
reference: https://docs.cloud.oracle.com/api/#/en/operationsinsights/
20200630/datatypes/DataObjectBindParameter. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--query-query-execution-timeout-in-seconds [text]

Timeout (in seconds) to be set for the data object query execution.

--query-statement [text]

SQL query statement with standard Oracle supported SQL syntax. - When
Warehouse (e.g: Awr hub) data objects are queried, use the actual
names of underlying data objects (e.g: tables, views) in the query.
The same query that works through JDBC connection with the
OperationsInsightsWarehouseUsers credentials will work here and vice-
versa. SCHEMA.VIEW syntax can also be used here. - When OPSI data
objects are queried, use name of the respective OPSI data object, just
like how views are used in a query. Identifier of the OPSI data object
cannot be used in the query.

--query-time-filters [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--resource-filters [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/opsi/opsi-data-objects/query-data-standard-query.html#cmdoption-compartment-id

       oci opsi opsi-data-objects query-data-standard-query --compartment-id $compartment_id
