"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates the RoverCluster


Usage
=====

   oci rover standalone-cluster update [OPTIONS]


Required Parameters
===================

--cluster-id [text]

Unique RoverStandalone Cluster identifier


Optional Parameters
===================

--address1 [text]

Address line 1.

--address2 [text]

Optional address line 2.

--address3 [text]

Optional address line 3.

--address4 [text]

Optional address line 4.

--addressee [text]

Company or person to send the appliance to

--care-of [text]

Place/person to direct the package to.

--city-or-locality [text]

City or Locality.

--cluster-size [integer]

Number of nodes desired in the cluster, in standalone clusters,
between 5 and 15 inclusive. In station clusters, between 15 and 30
inclusive.

--country [text]

Country.

--defined-tags [complex type]

The defined tags associated with this resource, if any. Each key is
predefined and scoped to namespaces. For more information, see
Resource Tags. Example: *{“Operations”: {“CostCenter”: “42”}}* This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

A user-friendly name. Does not have to be unique, and it’s changeable.
Avoid entering confidential information.

--email [text]

Email address.

--enclosure-type [text]

The type of enclosure rover nodes in this cluster are shipped in.

Accepted values are:

   NON_RUGGADIZED, RUGGADIZED

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

The freeform tags associated with this resource, if any. Each tag is a
simple key-value pair with no predefined name, type, or namespace. For
more information, see Resource Tags. Example: *{“Department”:
“Finance”}* This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--lifecycle-state [text]

The current state of the RoverCluster.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING, FAILED, UPDATING

--lifecycle-state-details [text]

A property that can contain details on the lifecycle.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--phone-number [text]

Phone number.

--point-of-contact [text]

Name of point of contact for this order if customer is picking up.

--point-of-contact-phone-number [text]

Phone number of point of contact for this order if customer is picking
up.

--shipping-preference [text]

Preference for device delivery.

Accepted values are:

   CUSTOMER_PICKUP, ORACLE_SHIPPED

--state-province-region [text]

State or Province or Region.

--subscription-id [text]

ID provided to customer after successful subscription to Rover
Stations.

--system-tags [complex type]

The system tags associated with this resource, if any. The system tags
are set by Oracle cloud infrastructure services. Each key is
predefined and scoped to namespaces. For more information, see
Resource Tags. Example: *{orcl-cloud: {free-tier-retain: true}}* This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING, FAILED, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.

--zip-postal-code [text]

Zip or Postal Code


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export cluster_id=<substitute-value-of-cluster_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/rover/standalone-cluster/update.html#cmdoption-cluster-id

       oci rover standalone-cluster update --cluster-id $cluster_id
