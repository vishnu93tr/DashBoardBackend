"decrypt"
*********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Decrypts data using the given DecryptDataDetails resource.

The top level –endpoint parameter must be supplied for this operation.


Usage
=====

   oci kms crypto decrypt [OPTIONS]


Required Parameters
===================

--ciphertext [text]

The encrypted data to decrypt.

--key-id [text]

The OCID of the key used to encrypt the ciphertext.


Optional Parameters
===================

--associated-data [complex type]

Information that can be used to provide an encryption context for the
encrypted data. The length of the string representation of the
associated data must be fewer than 4096 characters. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--encryption-algorithm [text]

The encryption algorithm to use to encrypt or decrypt data with a
customer-managed key. *AES_256_GCM* indicates that the key is a
symmetric key that uses the Advanced Encryption Standard (AES)
algorithm and that the mode of encryption is the Galois/Counter Mode
(GCM). *RSA_OAEP_SHA_1* indicates that the key is an asymmetric key
that uses the RSA encryption algorithm and uses Optimal Asymmetric
Encryption Padding (OAEP). *RSA_OAEP_SHA_256* indicates that the key
is an asymmetric key that uses the RSA encryption algorithm with a
SHA-256 hash and uses OAEP.

Accepted values are:

   AES_256_GCM, RSA_OAEP_SHA_1, RSA_OAEP_SHA_256

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--key-version-id [text]

The OCID of the key version used to encrypt the ciphertext.

--logging-context [complex type]

Information that provides context for audit logging. You can provide
this additional data as key-value pairs to include in audit logs when
audit logging is enabled. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci kms management key create --generate-param-json-input key-shape > key-shape.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/kms/management/key/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/kms/management/key/create.html#cmdoption-display-name
       export ciphertext=<substitute-value-of-ciphertext> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/kms/crypto/decrypt.html#cmdoption-ciphertext

       key_id=$(oci kms management key create --compartment-id $compartment_id --display-name $display_name --endpoint https://region.domain.com --key-shape file://key-shape.json --query data.id --raw-output)

       oci kms crypto decrypt --ciphertext $ciphertext --endpoint https://region.domain.com --key-id $key_id
