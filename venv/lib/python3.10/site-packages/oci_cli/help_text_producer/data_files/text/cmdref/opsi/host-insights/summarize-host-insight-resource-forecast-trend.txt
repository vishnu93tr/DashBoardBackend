"summarize-host-insight-resource-forecast-trend"
************************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Get Forecast predictions for CPU or memory resources since a time in
the past. If compartmentIdInSubtree is specified, aggregates resources
in a compartment and in all sub-compartments.


Usage
=====

   oci opsi host-insights summarize-host-insight-resource-forecast-trend [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment.

--resource-metric [text]

Filter by host resource metric. Supported values are CPU, MEMORY,
LOGICAL_MEMORY, STORAGE and NETWORK.


Optional Parameters
===================

--analysis-time-interval [text]

Specify time period in ISO 8601 format with respect to current time.
Default is last 30 days represented by P30D. If timeInterval is
specified, then timeIntervalStart and timeIntervalEnd will be ignored.
Examples  P90D (last 90 days), P4W (last 4 weeks), P2M (last 2
months), P1Y (last 12 months), . Maximum value allowed is 25 months
prior to current time (P25M).

--compartment-id-in-subtree [boolean]

A flag to search all resources within a given compartment and all sub-
compartments.

--confidence [integer]

This parameter is used to change data’s confidence level, this data is
ingested by the forecast algorithm. Confidence is the probability of
an interval to contain the expected population parameter. Manipulation
of this value will lead to different results. If not set, default
confidence value is 95%.

--defined-tag-equals [text]

A list of tag filters to apply.  Only resources with a defined tag
matching the value will be returned. Each item in the list has the
format “{namespace}.{tagName}.{value}”.  All inputs are case-
insensitive. Multiple values for the same key (i.e. same namespace and
tag name) are interpreted as “OR”. Values for different keys (i.e.
different namespaces, different tag names, or both) are interpreted as
“AND”.

--defined-tag-exists [text]

A list of tag existence filters to apply.  Only resources for which
the specified defined tags exist will be returned. Each item in the
list has the format “{namespace}.{tagName}.true” (for checking
existence of a defined tag) or “{namespace}.true”.  All inputs are
case-insensitive. Currently, only existence (“true” at the end) is
supported. Absence (“false” at the end) is not supported. Multiple
values for the same key (i.e. same namespace and tag name) are
interpreted as “OR”. Values for different keys (i.e. different
namespaces, different tag names, or both) are interpreted as “AND”.

--exadata-insight-id [text]

Optional list of exadata insight resource OCIDs.

--forecast-days [integer]

Number of days used for utilization forecast analysis.

--forecast-model [text]

Choose algorithm model for the forecasting. Possible values:   -
LINEAR: Uses linear regression algorithm for forecasting.   - ML_AUTO:
Automatically detects best algorithm to use for forecasting.   -
ML_NO_AUTO: Automatically detects seasonality of the data for
forecasting using linear or seasonal algorithm.

Accepted values are:

   LINEAR, ML_AUTO, ML_NO_AUTO

--freeform-tag-equals [text]

A list of tag filters to apply.  Only resources with a freeform tag
matching the value will be returned. The key for each tag is
“{tagName}.{value}”.  All inputs are case-insensitive. Multiple values
for the same tag name are interpreted as “OR”.  Values for different
tag names are interpreted as “AND”.

--freeform-tag-exists [text]

A list of tag existence filters to apply.  Only resources for which
the specified freeform tags exist the value will be returned. The key
for each tag is “{tagName}.true”.  All inputs are case-insensitive.
Currently, only existence (“true” at the end) is supported. Absence
(“false” at the end) is not supported. Multiple values for different
tag names are interpreted as “AND”.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--gpu-id [integer]

GPU identifier.

--high-utilization-threshold [integer]

Percent value in which a resource metric is considered highly
utilized.

--host-id [text]

Optional OCID of the host (Compute Id)

--host-type [text]

Filter by one or more host types. Possible values are CLOUD-HOST,
EXTERNAL-HOST, COMANAGED-VM-HOST, COMANAGED-BM-HOST, COMANAGED-EXACS-
HOST, COMANAGED-EXACC-HOST

--id [text]

Optional list of host insight resource OCIDs.

--interface-name [text]

Name of the network interface.

--low-utilization-threshold [integer]

Percent value in which a resource metric is considered low utilized.

--mount-point [text]

Mount points are specialized NTFS filesystem objects.

--page [text]

For list pagination. The value of the *opc-next-page* response header
from the previous “List” call. For important details about how
pagination works, see List Pagination.

--platform-type [text]

Filter by one or more platform types. Supported platformType(s) for
MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS].
Supported platformType(s) for MACS-managed cloud host insight:
[LINUX]. Supported platformType(s) for EM-managed external host
insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX, HP-UX].

Accepted values are:

   AIX, HP_UX, LINUX, SOLARIS, SUNOS, WINDOWS, ZLINUX

--statistic [text]

Choose the type of statistic metric data to be used for forecasting.

Accepted values are:

   AVG, MAX

--status [text]

Resource Status

Accepted values are:

   DISABLED, ENABLED, TERMINATED

--time-interval-end [datetime]

Analysis end time in UTC in ISO 8601 format(exclusive). Example
2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and
timeIntervalEnd are used together. If timeIntervalEnd is not
specified, current time is used as timeIntervalEnd.

   The following datetime formats are supported:


UTC with microseconds
---------------------

   Format: YYYY-MM-DDTHH:mm:ss.ssssssTZD
   Example: 2017-09-15T20:30:00.123456Z

   UTC with milliseconds
   ***********************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ss.sssTZD
       Example: 2017-09-15T20:30:00.123Z

   UTC without milliseconds
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T20:30:00Z

   UTC with minute precision
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T20:30Z


Timezone with microseconds
--------------------------

   Format: YYYY-MM-DDTHH:mm:ssTZD
   Example: 2017-09-15T12:30:00.456789-08:00, 2017-09-15T12:30:00.456789-0800

   Timezone with milliseconds
   ***************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

   Timezone without milliseconds
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

   Timezone with minute precision
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   Short date and time
   ********************
   The timezone for this date and time will be taken as UTC (Needs to be surrounded by single or double quotes)

   .. code::

       Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
       Example: '2017-09-15 17:25'

   Date Only
   **********
   This date will be taken as midnight UTC of that day

   .. code::

       Format: YYYY-MM-DD
       Example: 2017-09-15

   Epoch seconds
   **************
   .. code::

       Example: 1412195400

--time-interval-start [datetime]

Analysis start time in UTC in ISO 8601 format(inclusive). Example
2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). The minimum allowed value
is 2 years prior to the current day. timeIntervalStart and
timeIntervalEnd parameters are used together. If analysisTimeInterval
is specified, this parameter is ignored.

   The following datetime formats are supported:


UTC with microseconds
---------------------

   Format: YYYY-MM-DDTHH:mm:ss.ssssssTZD
   Example: 2017-09-15T20:30:00.123456Z

   UTC with milliseconds
   ***********************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ss.sssTZD
       Example: 2017-09-15T20:30:00.123Z

   UTC without milliseconds
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T20:30:00Z

   UTC with minute precision
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T20:30Z


Timezone with microseconds
--------------------------

   Format: YYYY-MM-DDTHH:mm:ssTZD
   Example: 2017-09-15T12:30:00.456789-08:00, 2017-09-15T12:30:00.456789-0800

   Timezone with milliseconds
   ***************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

   Timezone without milliseconds
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

   Timezone with minute precision
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   Short date and time
   ********************
   The timezone for this date and time will be taken as UTC (Needs to be surrounded by single or double quotes)

   .. code::

       Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
       Example: '2017-09-15 17:25'

   Date Only
   **********
   This date will be taken as midnight UTC of that day

   .. code::

       Format: YYYY-MM-DD
       Example: 2017-09-15

   Epoch seconds
   **************
   .. code::

       Example: 1412195400

--utilization-level [text]

Filter by utilization level by the following buckets:   -
HIGH_UTILIZATION: DBs with utilization greater or equal than 75.   -
LOW_UTILIZATION: DBs with utilization lower than 25.   -
MEDIUM_HIGH_UTILIZATION: DBs with utilization greater or equal than 50
but lower than 75.   - MEDIUM_LOW_UTILIZATION: DBs with utilization
greater or equal than 25 but lower than 50.

Accepted values are:

   HIGH_UTILIZATION, LOW_UTILIZATION, MEDIUM_HIGH_UTILIZATION, MEDIUM_LOW_UTILIZATION

--vmcluster-name [text]

Optional list of Exadata Insight VM cluster name.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/opsi/host-insights/summarize-host-insight-resource-forecast-trend.html#cmdoption-compartment-id
       export resource_metric=<substitute-value-of-resource_metric> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/opsi/host-insights/summarize-host-insight-resource-forecast-trend.html#cmdoption-resource-metric

       oci opsi host-insights summarize-host-insight-resource-forecast-trend --compartment-id $compartment_id --resource-metric $resource_metric
