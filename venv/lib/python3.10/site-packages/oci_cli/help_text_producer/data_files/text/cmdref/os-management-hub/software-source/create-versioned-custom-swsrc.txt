"create-versioned-custom-swsrc"
*******************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new software source.


Usage
=====

   oci os-management-hub software-source create-versioned-custom-swsrc [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment that contains the software source.

--software-source-version [text]

The version to assign to this custom software source.

--vendor-software-sources [complex type]

List of vendor software sources. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{“Operations”: {“CostCenter”: “42”}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

User-specified description for the software source. Avoid entering
confidential information.

--display-name [text]

User-friendly name for the software source. Does not have to be unique
and you can change the name later. Avoid entering confidential
information.

--filter [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{“Department”: “Finance”}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-auto-resolve-dependencies [boolean]

Indicates whether the service should automatically resolve package
dependencies when including specific packages in the software source.

--is-created-from-package-list [boolean]

Indicates whether the service should create the software source from a
list of packages provided by the user.

--is-latest-content-only [boolean]

Indicates whether the software source will include only the latest
versions of content from vendor software sources, while accounting for
other constraints set in the custom or versioned custom software
source (such as a package list or filters). * For a module filter that
does not specify a stream, this will include all available streams,
and within each stream only the latest version of packages. * For a
module filter that does specify a stream, this will include only the
latest version of packages for the specified stream. * For a package
filter that does not specify a version, this will include only the
latest available version of the package. * For a package filter that
does specify a version, this will include only the specified version
of the package (the isLatestContentOnly attribute is ignored). * For a
package list, this will include only the specified version of packages
and modules in the list (the isLatestContentOnly attribute is
ignored).

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--packages [complex type]

A property used for compatibility only. It doesn’t provide a complete
list of packages. See AddPackagesToSoftwareSourceDetails for providing
the list of packages used to create the software source when
isCreatedFromPackageList is set to true. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--software-source-sub-type [text]

The creation type of a software source.

Accepted values are:

   FILTER, MANIFEST, SNAPSHOT

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED, WAITING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci os-management-hub software-source create-versioned-custom-swsrc --generate-param-json-input vendor-software-sources > vendor-software-sources.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/os-management-hub/software-source/create-versioned-custom-swsrc.html#cmdoption-compartment-id
       export software_source_version=<substitute-value-of-software_source_version> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/os-management-hub/software-source/create-versioned-custom-swsrc.html#cmdoption-software-source-version

       oci os-management-hub software-source create-versioned-custom-swsrc --compartment-id $compartment_id --software-source-version $software_source_version --vendor-software-sources file://vendor-software-sources.json
