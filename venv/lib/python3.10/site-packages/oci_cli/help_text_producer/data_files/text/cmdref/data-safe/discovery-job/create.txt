"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Performs incremental data discovery for the specified sensitive data
model. It uses the target database associated with the sensitive data
model. After performing data discovery, you can use
ListDiscoveryJobResults to view the discovery results,
PatchDiscoveryJobResults to specify the action you want perform on
these results, and then ApplyDiscoveryJobResults to process the
results and apply them to the sensitive data model.


Usage
=====

   oci data-safe discovery-job create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment where the discovery job resource should be
created.

--sensitive-data-model-id [text]

The OCID of the sensitive data model.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags Example:
*{“Operations”: {“CostCenter”: “42”}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--discovery-type [text]

The type of the discovery job. It defines the job’s scope. NEW
identifies new sensitive columns in the target database that are not
in the sensitive data model. DELETED identifies columns that are
present in the sensitive data model but have been deleted from the
target database. MODIFIED identifies columns that are present in the
target database as well as the sensitive data model but some of their
attributes have been modified. ALL covers all the above three
scenarios and reports new, deleted and modified columns.

--display-name [text]

A user-friendly name for the discovery job. Does not have to be
unique, and it is changeable. Avoid entering confidential information.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-app-defined-relation-discovery-enabled [boolean]

Indicates if the discovery job should identify potential application-
level (non-dictionary) referential relationships between columns. Note
that data discovery automatically identifies and adds database-level
(dictionary-defined) relationships. This option helps identify
application-level relationships that are not defined in the database
dictionary, which in turn, helps identify additional sensitive columns
and preserve referential integrity during data masking. It’s disabled
by default and should be used only if there is a need to identify
application-level relationships.

--is-include-all-schemas [boolean]

Indicates if all the schemas should be scanned by the discovery job.
If it is set to true, sensitive data is discovered in all schemas
(except for schemas maintained by Oracle). If both attributes are not
provided, the configuration from the sensitive data model is used.

--is-include-all-sensitive-types [boolean]

Indicates if all the existing sensitive types should be used by the
discovery job. If it’s set to true, the sensitiveTypeIdsForDiscovery
attribute is ignored and all sensitive types are used for data
discovery. If both attributes are not provided, the configuration from
the sensitive data model is used.

--is-sample-data-collection-enabled [boolean]

Indicates if the discovery job should collect and store sample data
values for the discovered columns. Sample data helps review the
discovered columns and ensure that they actually contain sensitive
data. As it collects original data from the target database, it’s
disabled by default and should be used only if it’s acceptable to
store sample data in Data Safe’s repository in Oracle Cloud. Note that
sample data values are not collected for columns with the following
data types: LONG, LOB, RAW, XMLTYPE and BFILE.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--schemas-for-discovery [complex type]

The schemas to be scanned by the discovery job. If not provided, the
schemasForDiscovery attribute of the sensitive data model is used to
get the list of schemas. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--sensitive-type-group-ids-for-discovery [complex type]

The OCIDs of the sensitive type groups to be used by the discovery
job. All the sensitive types present in sensitive type group will be
used for discovery. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--sensitive-type-ids-for-discovery [complex type]

The OCIDs of the sensitive types to be used by the discovery job. If
not provided, the sensitiveTypeIdsForDiscovery attribute of the
sensitive data model is used to get the list of sensitive types. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--tables-for-discovery [complex type]

The data discovery jobs will scan the tables specified here, including
both schemas and tables. In the absence of explicit input, the list of
tables is obtained from the tablesForDiscovery attribute of the
sensitive data model.

This option is a JSON list with items of type TablesForDiscovery.  For
documentation on TablesForDiscovery please see our API reference: htt
ps://docs.cloud.oracle.com/api/#/en/datasafe/20181201/datatypes/Table
sForDiscovery. This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED, SUSPENDED, SUSPENDING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/sensitive-data-model/create.html#cmdoption-compartment-id
       export target_id=<substitute-value-of-target_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/sensitive-data-model/create.html#cmdoption-target-id

       sensitive_data_model_id=$(oci data-safe sensitive-data-model create --compartment-id $compartment_id --target-id $target_id --query data.id --raw-output)

       oci data-safe discovery-job create --compartment-id $compartment_id --sensitive-data-model-id $sensitive_data_model_id
