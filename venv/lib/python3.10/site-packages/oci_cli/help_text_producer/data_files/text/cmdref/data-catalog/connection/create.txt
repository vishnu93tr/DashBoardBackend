"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new connection.


Usage
=====

   oci data-catalog connection create [OPTIONS]


Required Parameters
===================

--catalog-id [text]

Unique catalog identifier.

--data-asset-key [text]

Unique data asset key.

--display-name [text]

A user-friendly display name. Does not have to be unique, and it’s
changeable. Avoid entering confidential information.

--properties [complex type]

A map of maps that contains the properties which are specific to the
connection type. Each connection type definition defines it’s set of
required and optional properties. The map keys are category names and
the values are maps of property name to property value. Every property
is contained inside of a category. Most connections have required
properties within the “default” category. To determine the set of
optional and required properties for a connection type, a query can be
done on ‘/types?type=connection’ that returns a collection of all
connection types. The appropriate connection type, which will include
definitions of all of it’s properties, can be identified from this
collection. Example: *{“properties”: { “default”: { “username”:
“user1”}}}* This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--type-key [text]

The key of the object type. Type key’s can be found via the ‘/types’
endpoint.


Optional Parameters
===================

--custom-property-members [complex type]

The list of customized properties along with the values for this
object

This option is a JSON list with items of type CustomPropertySetUsage.
For documentation on CustomPropertySetUsage please see our API
reference: https://docs.cloud.oracle.com/api/#/en/datacatalog/2019032
5/datatypes/CustomPropertySetUsage. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

A description of the connection.

--enc-properties [complex type]

A map of maps that contains the encrypted values for sensitive
properties which are specific to the connection type. Each connection
type definition defines it’s set of required and optional properties.
The map keys are category names and the values are maps of property
name to property value. Every property is contained inside of a
category. Most connections have required properties within the
“default” category. To determine the set of optional and required
properties for a connection type, a query can be done on
‘/types?type=connection’ that returns a collection of all connection
types. The appropriate connection type, which will include definitions
of all of it’s properties, can be identified from this collection.
Example: *{“encProperties”: { “default”: { “password”: “example-
password”}}}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-default [boolean]

Indicates whether this connection is the default connection. The first
connection of a data asset defaults to being the default, subsequent
connections default to not being the default. If a default connection
already exists, then trying to create a connection as the default will
fail. In this case the default connection would need to be updated not
to be the default and then the new connection can then be created as
the default.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING, FAILED, INACTIVE, MOVING, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci data-catalog connection create --generate-param-json-input properties > properties.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/catalog/create.html#cmdoption-compartment-id
       export data_asset_key=<substitute-value-of-data_asset_key> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/connection/create.html#cmdoption-data-asset-key
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/connection/create.html#cmdoption-display-name
       export type_key=<substitute-value-of-type_key> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/connection/create.html#cmdoption-type-key

       catalog_id=$(oci data-catalog catalog create --compartment-id $compartment_id --query data.id --raw-output)

       oci data-catalog connection create --catalog-id $catalog_id --data-asset-key $data_asset_key --display-name $display_name --properties file://properties.json --type-key $type_key
