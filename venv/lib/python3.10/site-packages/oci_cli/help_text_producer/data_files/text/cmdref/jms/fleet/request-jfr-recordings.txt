"request-jfr-recordings"
************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Request to collect the JFR recordings on the selected target in the
Fleet. The JFR files are uploaded to the object storage bucket created
by JMS on enabling Generic JFR feature in the Fleet.


Usage
=====

   oci jms fleet request-jfr-recordings [OPTIONS]


Required Parameters
===================

--fleet-id [text]

The OCID of the Fleet.

--jfc-profile-name [text]

The profile used for JFR events selection. If the name isn’t
recognized, the settings from jfcV1 or jfcV2 will be used depending on
the JVM version. Both jfcV2 and jfcV1 should be provided to ensure JFR
collection on different JVM versions.


Optional Parameters
===================

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--jfc-v1 [text]

The BASE64 encoded string of JFR settings XML with schema used by JDK
8.

--jfc-v2 [text]

The BASE64 encoded string of JFR settings XML with schema used by JDK
9 and after.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--recording-duration-in-minutes [integer]

Duration of the JFR recording in minutes.

--recording-size-in-mb [integer]

The maximum size limit for the JFR file collected.

--targets [complex type]

The attachment targets to start JFR.

This option is a JSON list with items of type JfrAttachmentTarget.
For documentation on JfrAttachmentTarget please see our API reference:
https://docs.cloud.oracle.com/api/#/en/javamanagementservice/20210610
/datatypes/JfrAttachmentTarget. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.

--waiting-period-in-minutes [integer]

Period to looking for JVMs. In addition to attach to running JVMs when
given the command, JVM started within the waiting period will also be
attached for JFR. The value should be larger than the agent polling
interval setting for the fleet to ensure agent can get the
instructions. If not specified, the agent polling interval for the
fleet is used.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci jms fleet create --generate-param-json-input inventory-log > inventory-log.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/jms/fleet/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/jms/fleet/create.html#cmdoption-display-name
       export jfc_profile_name=<substitute-value-of-jfc_profile_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/jms/fleet/request-jfr-recordings.html#cmdoption-jfc-profile-name

       fleet_id=$(oci jms fleet create --compartment-id $compartment_id --display-name $display_name --inventory-log file://inventory-log.json --query data.id --raw-output)

       oci jms fleet request-jfr-recordings --fleet-id $fleet_id --jfc-profile-name $jfc_profile_name
