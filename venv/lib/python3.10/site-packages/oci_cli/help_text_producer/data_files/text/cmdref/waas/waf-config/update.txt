"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates the Web Application Firewall configuration for a specified
WAAS policy.

To update platform provided resources such as *GoodBots*,
*ProtectionRules*, and *ThreatFeeds*, first retrieve the list of
available resources with the related list operation, such as
*GetThreatFeeds* or *GetProtectionRules*.

The returned list will contain objects with *key* properties that can
be used to update the resource during the *UpdateWafConfig* request.


Usage
=====

   oci waas waf-config update [OPTIONS]


Required Parameters
===================

--waas-policy-id [text]

The OCID of the WAAS policy.


Optional Parameters
===================

--access-rules [complex type]

The access rules applied to the Web Application Firewall. Used for
defining custom access policies with the combination of *ALLOW*,
*DETECT*, and *BLOCK* rules, based on different criteria.

This option is a JSON list with items of type AccessRule.  For
documentation on AccessRule please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/waas/20181116/datatypes/AccessRule. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--address-rate-limiting [complex type]

The IP address rate limiting settings used to limit the number of
requests from an address. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--caching-rules [complex type]

A list of caching rules applied to the web application.

This option is a JSON list with items of type CachingRule.  For
documentation on CachingRule please see our API reference: https://do
cs.cloud.oracle.com/api/#/en/waas/20181116/datatypes/CachingRule. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--captchas [complex type]

A list of CAPTCHA challenge settings. These are used to challenge
requests with a CAPTCHA to block bots.

This option is a JSON list with items of type Captcha.  For
documentation on Captcha please see our API reference: https://docs.c
loud.oracle.com/api/#/en/waas/20181116/datatypes/Captcha. This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--custom-protection-rules [complex type]

A list of the custom protection rule OCIDs and their actions.

This option is a JSON list with items of type
CustomProtectionRuleSetting.  For documentation on
CustomProtectionRuleSetting please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/waas/20181116/datatypes/CustomProtectionR
uleSetting. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--device-fingerprint-challenge [complex type]

The device fingerprint challenge settings. Used to detect unique
devices based on the device fingerprint information collected in order
to block bots. This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--force

Perform update without prompting for confirmation.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--good-bots [complex type]

A list of bots allowed to access the web application.

This option is a JSON list with items of type GoodBot.  For
documentation on GoodBot please see our API reference: https://docs.c
loud.oracle.com/api/#/en/waas/20181116/datatypes/GoodBot. This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--human-interaction-challenge [complex type]

The human interaction challenge settings. Used to look for natural
human interactions such as mouse movements, time on site, and page
scrolling to identify bots. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--if-match [text]

For optimistic concurrency control. In the *PUT* or *DELETE* call for
a resource, set the *if-match* parameter to the value of the etag from
a previous *GET* or *POST* response for that resource. The resource
will be updated or deleted only if the etag provided matches the
resource’s current etag value.

--js-challenge [complex type]

The JavaScript challenge settings. Used to challenge requests with a
JavaScript challenge and take the action if a browser has no
JavaScript support in order to block bots. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--origin [text]

The key in the map of origins referencing the origin used for the Web
Application Firewall. The origin must already be included in
*Origins*. Required when creating the *WafConfig* resource, but not on
update.

--origin-groups [complex type]

The map of origin groups and their keys used to associate origins to
the *wafConfig*. Origin groups allow you to apply weights to groups of
origins for load balancing purposes. Origins with higher weights will
receive larger proportions of client requests. To add additional
origins to your WAAS policy, update the *origins* field of a
*UpdateWaasPolicy* request. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--protection-rules [complex type]

A list of the protection rules and their details.

This option is a JSON list with items of type ProtectionRule.  For
documentation on ProtectionRule please see our API reference: https:/
/docs.cloud.oracle.com/api/#/en/waas/20181116/datatypes/ProtectionRul
e. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--protection-settings [complex type]

The settings to apply to protection rules. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--threat-feeds [complex type]

A list of threat intelligence feeds and the actions to apply to known
malicious traffic based on internet intelligence.

This option is a JSON list with items of type ThreatFeed.  For
documentation on ThreatFeed please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/waas/20181116/datatypes/ThreatFeed. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.

--whitelists [complex type]

A list of IP addresses that bypass the Web Application Firewall.

This option is a JSON list with items of type Whitelist.  For
documentation on Whitelist please see our API reference: https://docs
.cloud.oracle.com/api/#/en/waas/20181116/datatypes/Whitelist. This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/waas/waas-policy/create.html#cmdoption-compartment-id
       export domain=<substitute-value-of-domain> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/waas/waas-policy/create.html#cmdoption-domain

       waas_policy_id=$(oci waas waas-policy create --compartment-id $compartment_id --domain $domain --query data.id --raw-output)

       oci waas waf-config update --waas-policy-id $waas_policy_id
