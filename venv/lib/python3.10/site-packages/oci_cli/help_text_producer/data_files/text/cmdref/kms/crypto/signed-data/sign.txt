"sign"
******

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a digital signature for a message or message digest by using
the private key of a public-private key pair, also known as an
asymmetric key. To verify the generated signature, you can use the
Verify operation. Or, if you want to validate the signature outside of
the service, you can do so by using the public key of the same
asymmetric key. This operation is not supported for keys having
protection mode *EXTERNAL*.

The top level –endpoint parameter must be supplied for this operation.


Usage
=====

   oci kms crypto signed-data sign [OPTIONS]


Required Parameters
===================

--key-id [text]

The OCID of the key used to sign the message.

--message [text]

The base64-encoded binary data object denoting the message or message
digest to sign. You can have a message up to 4096 bytes in size. To
sign a larger message, provide the message digest.

--signing-algorithm [text]

The algorithm to use to sign the message or message digest. For RSA
keys, supported signature schemes include PKCS #1 and RSASSA-PSS,
along with different hashing algorithms. For ECDSA keys, ECDSA is the
supported signature scheme with different hashing algorithms. When you
pass a message digest for signing, ensure that you specify the same
hashing algorithm as used when creating the message digest.

Accepted values are:

   ECDSA_SHA_256, ECDSA_SHA_384, ECDSA_SHA_512, SHA_224_RSA_PKCS1_V1_5, SHA_224_RSA_PKCS_PSS, SHA_256_RSA_PKCS1_V1_5, SHA_256_RSA_PKCS_PSS, SHA_384_RSA_PKCS1_V1_5, SHA_384_RSA_PKCS_PSS, SHA_512_RSA_PKCS1_V1_5, SHA_512_RSA_PKCS_PSS


Optional Parameters
===================

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--key-version-id [text]

The OCID of the key version used to sign the message.

--logging-context [complex type]

Information that can be used to provide context for audit logging. It
is a map that contains any additional data that you provide to include
with audit logs, if audit logging is enabled. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--message-type [text]

Denotes whether the value of the message parameter is a raw message or
a message digest. The default value, *RAW*, indicates a message. To
indicate a message digest, use *DIGEST*.

Accepted values are:

   DIGEST, RAW


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci kms management key create --generate-param-json-input key-shape > key-shape.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/kms/management/key/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/kms/management/key/create.html#cmdoption-display-name
       export message=<substitute-value-of-message> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/kms/crypto/signed-data/sign.html#cmdoption-message
       export signing_algorithm=<substitute-value-of-signing_algorithm> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/kms/crypto/signed-data/sign.html#cmdoption-signing-algorithm

       key_id=$(oci kms management key create --compartment-id $compartment_id --display-name $display_name --endpoint https://region.domain.com --key-shape file://key-shape.json --query data.id --raw-output)

       oci kms crypto signed-data sign --key-id $key_id --message $message --signing-algorithm $signing_algorithm
