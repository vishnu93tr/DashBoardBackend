"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates configuration of the object collection rule for the given id.


Usage
=====

   oci log-analytics object-collection-rule update [OPTIONS]


Required Parameters
===================

--namespace-name, --namespace, -ns [text]

The Logging Analytics namespace used for the request.

--object-collection-rule-id [text]

The Logging Analytics Object Collection Rule OCID


Optional Parameters
===================

--char-encoding [text]

An optional character encoding to aid in detecting the character
encoding of the contents of the objects while processing. It is
recommended to set this value as ISO_8859_1 when configuring content
of the objects having more numeric characters, and very few alphabets.
For e.g. this applies when configuring VCN Flow Logs.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. Example: *{“foo-namespace”: {“bar-key”: “value”}}* This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

A string that describes the details of the rule. Avoid entering
confidential information.

--entity-id [text]

Logging Analytics entity OCID. Associates the processed logs with the
given entity (optional).

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only. Example: *{“bar-
key”: “value”}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--is-enabled [boolean]

Whether or not this rule is currently enabled.

--log-group-id [text]

Logging Analytics Log group OCID to associate the processed logs with.

--log-set [text]

The logSet to be associated with the processed logs. The logSet
feature can be used by customers with high volume of data and this
feature has to be enabled for a given tenancy prior to its usage. When
logSetExtRegex value is provided, it will take precedence over this
logSet value and logSet will be computed dynamically using logSetKey
and logSetExtRegex.

--log-set-ext-regex [text]

The regex to be applied against given logSetKey. Regex has to be in
string escaped format.

--log-set-key [text]

An optional parameter to indicate from where the logSet to be
extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g.
/n/<namespace>/b/<bucketname>/o/<objectname>).

Accepted values are:

   OBJECT_PATH

--log-source-name [text]

Name of the Logging Analytics Source to use for the processing.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--object-name-filters [complex type]

When the filters are provided, only the objects matching the filters
are picked up for processing. The matchType supported is exact match
and accommodates wildcard “*”. For more information on filters, see
Event Filters. This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--overrides [complex type]

Use this to override some property values which are defined at bucket
level to the scope of object. Supported propeties for override are:
logSourceName, charEncoding, entityId. Supported matchType for
override are “contains”. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--timezone [text]

Timezone to be used when processing log entries whose timestamps do
not include an explicit timezone. When this property is not specified,
the timezone of the entity specified is used. If the entity is also
not specified or do not have a valid timezone then UTC is used.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, DELETED, INACTIVE

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/log-group/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/log-group/create.html#cmdoption-display-name
       export namespace_name=<substitute-value-of-namespace_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/log-group/create.html#cmdoption-namespace-name
       export log_source_name=<substitute-value-of-log_source_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/object-collection-rule/create.html#cmdoption-log-source-name
       export os_bucket_name=<substitute-value-of-os_bucket_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/object-collection-rule/create.html#cmdoption-os-bucket-name
       export os_namespace=<substitute-value-of-os_namespace> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/object-collection-rule/create.html#cmdoption-os-namespace

       log_group_id=$(oci log-analytics log-group create --compartment-id $compartment_id --display-name $display_name --namespace-name $namespace_name --query data.id --raw-output)

       object_collection_rule_id=$(oci log-analytics object-collection-rule create --compartment-id $compartment_id --log-group-id $log_group_id --log-source-name $log_source_name --name $name --namespace-name $namespace_name --os-bucket-name $os_bucket_name --os-namespace $os_namespace --query data.id --raw-output)

       oci log-analytics object-collection-rule update --namespace-name $namespace_name --object-collection-rule-id $object_collection_rule_id
