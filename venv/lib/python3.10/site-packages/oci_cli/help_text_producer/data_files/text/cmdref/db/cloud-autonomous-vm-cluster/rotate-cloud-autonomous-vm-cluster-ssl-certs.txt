"rotate-cloud-autonomous-vm-cluster-ssl-certs"
**********************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Rotates the SSL certficates for a cloud Autonomous Exadata VM cluster.


Usage
=====

   oci db cloud-autonomous-vm-cluster rotate-cloud-autonomous-vm-cluster-ssl-certs [OPTIONS]


Required Parameters
===================

--certificate-generation-type [text]

Specify SYSTEM to use Oracle-managed certificates. Specify BYOC when
you want to bring your own certificate.

Accepted values are:

   BYOC, SYSTEM

--cloud-autonomous-vm-cluster-id [text]

The Cloud VM cluster OCID.


Optional Parameters
===================

--ca-bundle-id [text]

The OCID of the certificate bundle.

--certificate-authority-id [text]

The OCID of the certificate authority.

--certificate-id [text]

The OCID of the certificate to use.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource.  The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export cloud_exadata_infrastructure_id=<substitute-value-of-cloud_exadata_infrastructure_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/db/cloud-autonomous-vm-cluster/create.html#cmdoption-cloud-exadata-infrastructure-id
       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/db/cloud-autonomous-vm-cluster/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/db/cloud-autonomous-vm-cluster/create.html#cmdoption-display-name
       export subnet_id=<substitute-value-of-subnet_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/db/cloud-autonomous-vm-cluster/create.html#cmdoption-subnet-id
       export certificate_generation_type=<substitute-value-of-certificate_generation_type> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/db/cloud-autonomous-vm-cluster/rotate-cloud-autonomous-vm-cluster-ssl-certs.html#cmdoption-certificate-generation-type

       cloud_autonomous_vm_cluster_id=$(oci db cloud-autonomous-vm-cluster create --cloud-exadata-infrastructure-id $cloud_exadata_infrastructure_id --compartment-id $compartment_id --display-name $display_name --subnet-id $subnet_id --query data.id --raw-output)

       oci db cloud-autonomous-vm-cluster rotate-cloud-autonomous-vm-cluster-ssl-certs --certificate-generation-type $certificate_generation_type --cloud-autonomous-vm-cluster-id $cloud_autonomous_vm_cluster_id
