"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new virtual customer-premises equipment (CPE) object in the
specified compartment. For more information, see Site-to-Site VPN
Overview.

For the purposes of access control, you must provide the OCID of the
compartment where you want the CPE to reside. Notice that the CPE
doesn’t have to be in the same compartment as the IPSec connection or
other Networking Service components. If you’re not sure which
compartment to use, put the CPE in the same compartment as the DRG.
For more information about compartments and access control, see
Overview of the IAM Service. For information about OCIDs, see Resource
Identifiers.

You must provide the public IP address of your on-premises router. See
CPE Configuration.

You may optionally specify a *display name* for the CPE, otherwise a
default is provided. It does not have to be unique, and you can change
it. Avoid entering confidential information.


Usage
=====

   oci network cpe create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment to contain the CPE.

--ip-address [text]

The public IP address of the on-premises router.

Example:

   203.0.113.2


Optional Parameters
===================

--cpe-device-shape-id [text]

The OCID of the CPE device type. You can provide a value if you want
to later generate CPE device configuration content for IPSec
connections that use this CPE. You can also call UpdateCpe later to
provide a value. For a list of possible values, see
ListCpeDeviceShapes.

For more information about generating CPE device configuration
content, see:

   * GetCpeDeviceConfigContent   * GetIpsecCpeDeviceConfigContent   *
     GetTunnelCpeDeviceConfigContent   * GetTunnelCpeDeviceConfig

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags.

Example:

   {"Operations": {"CostCenter": "42"}}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

A user-friendly name. Does not have to be unique, and it’s changeable.
Avoid entering confidential information.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-private [boolean]

Indicates whether this CPE is of type *private* or not.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network/cpe/create.html#cmdoption-compartment-id
       export ip_address=<substitute-value-of-ip_address> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network/cpe/create.html#cmdoption-ip-address

       oci network cpe create --compartment-id $compartment_id --ip-address $ip_address
