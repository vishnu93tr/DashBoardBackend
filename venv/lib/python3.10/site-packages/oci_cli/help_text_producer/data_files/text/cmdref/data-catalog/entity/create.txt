"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new data entity.


Usage
=====

   oci data-catalog entity create [OPTIONS]


Required Parameters
===================

--catalog-id [text]

Unique catalog identifier.

--data-asset-key [text]

Unique data asset key.

--display-name [text]

A user-friendly display name. Does not have to be unique, and it’s
changeable. Avoid entering confidential information.

--time-external [datetime]

Last modified timestamp of the object in the external system.

   The following datetime formats are supported:


UTC with microseconds
---------------------

   Format: YYYY-MM-DDTHH:mm:ss.ssssssTZD
   Example: 2017-09-15T20:30:00.123456Z

   UTC with milliseconds
   ***********************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ss.sssTZD
       Example: 2017-09-15T20:30:00.123Z

   UTC without milliseconds
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T20:30:00Z

   UTC with minute precision
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T20:30Z


Timezone with microseconds
--------------------------

   Format: YYYY-MM-DDTHH:mm:ssTZD
   Example: 2017-09-15T12:30:00.456789-08:00, 2017-09-15T12:30:00.456789-0800

   Timezone with milliseconds
   ***************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

   Timezone without milliseconds
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

   Timezone with minute precision
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   Short date and time
   ********************
   The timezone for this date and time will be taken as UTC (Needs to be surrounded by single or double quotes)

   .. code::

       Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
       Example: '2017-09-15 17:25'

   Date Only
   **********
   This date will be taken as midnight UTC of that day

   .. code::

       Format: YYYY-MM-DD
       Example: 2017-09-15

   Epoch seconds
   **************
   .. code::

       Example: 1412195400


Optional Parameters
===================

--business-name [text]

Optional user friendly business name of the data entity. If set, this
supplements the harvested display name of the object.

--custom-property-members [complex type]

The list of customized properties along with the values for this
object

This option is a JSON list with items of type CustomPropertySetUsage.
For documentation on CustomPropertySetUsage please see our API
reference: https://docs.cloud.oracle.com/api/#/en/datacatalog/2019032
5/datatypes/CustomPropertySetUsage. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Detailed description of a data entity.

--folder-key [text]

Key of the associated folder.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--harvest-status [text]

Status of the object as updated by the harvest process. When an entity
object is created , it’s harvest status will indicate if the entity’s
metadata has been fully harvested or not. The harvest process can
perform shallow harvesting to allow users to browse the metadata and
can on-demand deep harvest on any object This requires a harvest
status indicator for catalog objects.

Accepted values are:

   COMPLETE, DEFERRED, ERROR, IN_PROGRESS

--is-logical [boolean]

Property to indicate if the object is a physical materialized object
or virtual. For example, View.

--is-partition [boolean]

Property to indicate if the object is a sub object of a parent
physical object.

--last-job-key [text]

Key of the last harvest process to update this object.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--pattern-key [text]

Key of the associated pattern if this is a logical entity.

--properties [complex type]

A map of maps that contains the properties which are specific to the
entity type. Each entity type definition defines it’s set of required
and optional properties. The map keys are category names and the
values are maps of property name to property value. Every property is
contained inside of a category. Most entities have required properties
within the “default” category. To determine the set of required and
optional properties for an entity type, a query can be done on
‘/types?type=dataEntity’ that returns a collection of all entity
types. The appropriate entity type, which includes definitions of all
of it’s properties, can be identified from this collection. Example:
*{“properties”: { “default”: { “key1”: “value1”}}}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--realized-expression [text]

The expression realized after resolving qualifiers . Used in deriving
this logical entity

--type-key [text]

The type of data entity object. Type key’s can be found via the
‘/types’ endpoint.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING, FAILED, INACTIVE, MOVING, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/catalog/create.html#cmdoption-compartment-id
       export data_asset_key=<substitute-value-of-data_asset_key> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/entity/create.html#cmdoption-data-asset-key
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/entity/create.html#cmdoption-display-name
       export time_external=<substitute-value-of-time_external> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-catalog/entity/create.html#cmdoption-time-external

       catalog_id=$(oci data-catalog catalog create --compartment-id $compartment_id --query data.id --raw-output)

       oci data-catalog entity create --catalog-id $catalog_id --data-asset-key $data_asset_key --display-name $display_name --time-external $time_external
