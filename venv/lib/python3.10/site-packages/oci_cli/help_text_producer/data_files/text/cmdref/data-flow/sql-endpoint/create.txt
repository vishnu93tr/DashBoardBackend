"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Create a new Sql Endpoint.


Usage
=====

   oci data-flow sql-endpoint create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The identifier of the compartment used with the SQL Endpoint.

--display-name [text]

The SQL Endpoint name, which can be changed.

--driver-shape [text]

The shape of the SQL Endpoint driver instance.

--executor-shape [text]

The shape of the SQL Endpoint worker instance.

--lake-id [text]

OCI lake OCID

--max-executor-count [integer]

The maximum number of executors.

--metastore-id [text]

Metastore OCID

--min-executor-count [integer]

The minimum number of executors.

--network-configuration [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--sql-endpoint-version [text]

The version of the SQL Endpoint.

--warehouse-bucket-uri [text]

The warehouse bucket URI. It is a Oracle Cloud Infrastructure Object
Storage bucket URI as defined here
https://docs.oracle.com/en/cloud/paas/atp-cloud/atpud/object-storage-
uris.html


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{“Operations”: {“CostCenter”: “42”}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

The description of CreateSQLEndpointDetails.

--driver-shape-config [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--executor-shape-config [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{“Department”: “Finance”}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--spark-advanced-configurations [complex type]

The Spark configuration passed to the running process. See
https://spark.apache.org/docs/latest/configuration.html#available-
properties. Example: { “spark.app.name” : “My App Name”,
“spark.shuffle.io.maxRetries” : “4” } Note: Not all Spark properties
are permitted to be set.  Attempting to set a property that is not
allowed to be overwritten will cause a 400 status to be returned. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELLED, CANCELLING, FAILED, INPROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci data-flow sql-endpoint create --generate-param-json-input network-configuration > network-configuration.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-display-name
       export driver_shape=<substitute-value-of-driver_shape> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-driver-shape
       export executor_shape=<substitute-value-of-executor_shape> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-executor-shape
       export lake_id=<substitute-value-of-lake_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-lake-id
       export max_executor_count=<substitute-value-of-max_executor_count> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-max-executor-count
       export metastore_id=<substitute-value-of-metastore_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-metastore-id
       export min_executor_count=<substitute-value-of-min_executor_count> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-min-executor-count
       export sql_endpoint_version=<substitute-value-of-sql_endpoint_version> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-sql-endpoint-version
       export warehouse_bucket_uri=<substitute-value-of-warehouse_bucket_uri> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-flow/sql-endpoint/create.html#cmdoption-warehouse-bucket-uri

       oci data-flow sql-endpoint create --compartment-id $compartment_id --display-name $display_name --driver-shape $driver_shape --executor-shape $executor_shape --lake-id $lake_id --max-executor-count $max_executor_count --metastore-id $metastore_id --min-executor-count $min_executor_count --network-configuration file://network-configuration.json --sql-endpoint-version $sql_endpoint_version --warehouse-bucket-uri $warehouse_bucket_uri
