"copy"
******

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a copy of the specified stack in the specified destination
(compartment and region). Note: The access token is required when
copying a stack that uses a Git configuration source provider to a
different region. For more information, see [To copy a stack].


Usage
=====

   oci resource-manager stack copy [OPTIONS]


Required Parameters
===================

--stack-id [text]

The OCID of the stack.


Optional Parameters
===================

--access-token [text]

The personal access token for the Git repository. Required when
copying a stack that uses a Git configuration source provider to a
different region. Avoid entering confidential information. For more
information, see [To copy a stack]. [Command Reference](copyStack)

--defined-tags [complex type]

Defined tags associated with this resource. Each key is predefined and
scoped to a namespace. For more information, see Resource Tags.
Example: *{“Operations”: {“CostCenter”: “42”}}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

The description to use for the copied stack.

--destination-compartment-id [text]

The OCID of the destination compartment for the copied stack.

--destination-region [text]

The destination region for the copied stack.

--display-name [text]

The display name to use for the copied stack.

--freeform-tags [complex type]

Free-form tags associated with this resource. Each tag is a simple
key-value pair with no predefined name, type, or namespace. For more
information, see Resource Tags. Example: *{“Department”: “Finance”}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--variables [complex type]

Terraform variables associated with this resource. Maximum number of
variables supported is 250. The maximum size of each variable,
including both name and value, is 4096 bytes. Example:
*{“CompartmentId”: “compartment-id-value”}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/resource-manager/stack/create.html#cmdoption-compartment-id
       export config_source=<substitute-value-of-config_source> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/resource-manager/stack/create.html#cmdoption-config-source

       stack_id=$(oci resource-manager stack create --compartment-id $compartment_id --config-source $config_source --query data.id --raw-output)

       oci resource-manager stack copy --stack-id $stack_id
