"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Create a new cluster.


Usage
=====

   oci ce cluster create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment in which to create the cluster.

--kubernetes-version [text]

The version of Kubernetes to install into the cluster masters.

--name [text]

The name of the cluster. Avoid entering confidential information.

--vcn-id [text]

The OCID of the virtual cloud network (VCN) in which to create the
cluster.


Optional Parameters
===================

--cluster-pod-network-options [complex type]

Available CNIs and network options for existing and new node pools of
the cluster

This option is a JSON list with items of type
ClusterPodNetworkOptionDetails.  For documentation on
ClusterPodNetworkOptionDetails please see our API reference: https://
docs.cloud.oracle.com/api/#/en/containerengine/20180222/datatypes/Clu
sterPodNetworkOptionDetails. This is a complex type whose value must
be valid JSON. The value can be provided as a string on the command
line or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--dashboard-enabled [boolean]

Select if you want to use the Kubernetes Dashboard to deploy and
troubleshoot containerized applications, and to manage Kubernetes
resources. Default value is false.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{“Operations”: {“CostCenter”: “42”}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--endpoint-nsg-ids [complex type]

A list of the OCIDs of the network security groups (NSGs) to apply to
the cluster endpoint. You must also specify –endpoint-subnet-id. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--endpoint-public-ip-enabled [boolean]

Whether the cluster should be assigned a public IP address. Defaults
to false. If set to true on a private subnet, the cluster provisioning
will fail. You must also specify –endpoint-subnet-id.

--endpoint-subnet-id [text]

The OCID of the regional subnet in which to place the Cluster
endpoint.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{“Department”: “Finance”}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--image-policy-config [complex type]

The image verification policy for signature validation. Once a policy
is created and enabled with one or more kms keys, the policy will
ensure all images deployed has been signed with the key(s) attached to
the policy. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ip-families [complex type]

A list of IP families for the cluster. Example: ‘[“IPv4”, “IPv6”]’
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--kms-key-id [text]

The OCID of the KMS key to be used as the master encryption key for
Kubernetes secret encryption. When used, *kubernetesVersion* must be
at least *v1.13.0*.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--oidc-ca-certificate [text]

The path to the certificate for the CA that signed your identity
provider’s web certificate. Defaults to the host’s root CAs.

--oidc-client-id [text]

A client id that all tokens must be issued for.

--oidc-configuration-file [text]

A base64 encoded string of kubernetes oidc auth configuration file.

--oidc-groups-claim [text]

JWT claim to use as the user’s group. If the claim is present it must
be an array of strings.

--oidc-groups-prefix [text]

Prefix prepended to group claims to prevent clashes with existing
names (such as system:groups).

--oidc-issuer-url [text]

URL of the provider that allows the API server to discover public
signing keys. Only URLs that use the https:// scheme are accepted.
This is typically the provider’s discovery URL, changed to have an
empty path.

--oidc-required-claims [complex type]

A key=value pair that describes a required claim in the ID Token. If
set, the claim is verified to be present
   in the ID Token with a matching value. Repeat this flag to specify
   multiple claims.

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--oidc-signing-algorithms [complex type]

The signing algorithms accepted. Default is [“RS256”]. This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--oidc-username-claim [text]

JWT claim to use as the user name. By default sub, which is expected
to be a unique identifier of the end user. Admins can choose other
claims, such as email or name, depending on their provider. However,
claims other than email will be prefixed with the issuer URL to
prevent naming clashes with other plugins.

--oidc-username-prefix [text]

Prefix prepended to username claims to prevent clashes with existing
names (such as system:users). For example, the value oidc: will create
usernames like oidc:jane.doe. If this flag isn’t provided and –oidc-
username-claim is a value other than email the prefix defaults to (
Issuer URL )# where ( Issuer URL ) is the value of –oidc-issuer-url.
The value - can be used to disable all prefixing.

--open-id-connect-auth-enabled [boolean]

Whether the cluster has OIDC Auth Config enabled. Defaults to false.

--open-id-connect-discovery-enabled [boolean]

Whether the cluster has OIDC Discovery enabled. Defaults to false. If
set to true, the cluster will be assigned a public OIDC Discovery
endpoint.

--persistent-volume-defined-tags [complex type]

Defined tags for the persistent volume. Each key is predefined and
scoped to a namespace. For more information, see Resource Tags.
Example: *{“Operations”: {“CostCenter”: “42”}}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--persistent-volume-freeform-tags [complex type]

Free-form tags for the persistent volume. Each tag is a simple key-
value pair with no predefined name, type, or namespace. For more
information, see Resource Tags. Example: *{“Department”: “Finance”}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--pods-cidr [text]

The available group of network addresses that can be allocated to pods
running in the cluster, expressed as a single, contiguous IPv4 CIDR
block. For example, 10.244.0.0/16.

--service-lb-defined-tags [complex type]

Defined tags for the service load balancer. Each key is predefined and
scoped to a namespace. For more information, see Resource Tags.
Example: *{“Operations”: {“CostCenter”: “42”}}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--service-lb-freeform-tags [complex type]

Free-form tags for the service load balancer. Each tag is a simple
key-value pair with no predefined name, type, or namespace. For more
information, see Resource Tags. Example: *{“Department”: “Finance”}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--service-lb-subnet-ids [complex type]

The two subnets configured to host load balancers in a Kubernetes
cluster. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--services-cidr [text]

The available group of network addresses that can be exposed as
Kubernetes services (ClusterIPs), expressed as a single, contiguous
IPv4 CIDR block. For example, 10.96.0.0/16.

--tiller-enabled [boolean]

Select if you want Tiller (the server portion of Helm) to run in the
Kubernetes cluster. Default value is false.

--type [text]

Type of cluster

Accepted values are:

   BASIC_CLUSTER, ENHANCED_CLUSTER

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/ce/cluster/create.html#cmdoption-compartment-id
       export kubernetes_version=<substitute-value-of-kubernetes_version> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/ce/cluster/create.html#cmdoption-kubernetes-version
       export name=<substitute-value-of-name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/ce/cluster/create.html#cmdoption-name
       export vcn_id=<substitute-value-of-vcn_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/ce/cluster/create.html#cmdoption-vcn-id

       oci ce cluster create --compartment-id $compartment_id --kubernetes-version $kubernetes_version --name $name --vcn-id $vcn_id
