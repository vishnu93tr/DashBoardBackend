"update-masking-policy-update-column-source-target-details"
***********************************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Updates one or more attributes of the specified masking policy.


Usage
=====

   oci data-safe masking-policy update-masking-policy-update-column-source-target-details [OPTIONS]


Required Parameters
===================

--column-source-target-id [text]

The OCID of the target database to be associated as the column source
with the masking policy.

--masking-policy-id [text]

The OCID of the masking policy.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags Example:
*{“Operations”: {“CostCenter”: “42”}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

The description of the masking policy.

--display-name [text]

The display name of the masking policy. The name does not have to be
unique, and it’s changeable.

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the if-match parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--is-drop-temp-tables-enabled [boolean]

Indicates if the temporary tables created during a masking operation
should be dropped after masking. It’s enabled by default. Set this
attribute to false to preserve the temporary tables. Masking creates
temporary tables that map the original sensitive data values to mask
values. By default, these temporary tables are dropped after masking.
But, in some cases, you may want to preserve this information to track
how masking changed your data. Note that doing so compromises
security. These tables must be dropped before the database is
available for unprivileged users.

--is-redo-logging-enabled [boolean]

Indicates if redo logging is enabled during a masking operation. It’s
disabled by default. Set this attribute to true to enable redo
logging. By default, masking disables redo logging and flashback
logging to purge any original unmasked data from logs. However, in
certain circumstances when you only want to test masking, rollback
changes, and retry masking, you could enable logging and use a
flashback database to retrieve the original unmasked data after it has
been masked.

--is-refresh-stats-enabled [boolean]

Indicates if statistics gathering is enabled. It’s enabled by default.
Set this attribute to false to disable statistics gathering. The
masking process gathers statistics on masked database tables after
masking completes.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--parallel-degree [text]

Specifies options to enable parallel execution when running data
masking. Allowed values are ‘NONE’ (no parallelism), ‘DEFAULT’ (the
Oracle Database computes the optimum degree of parallelism) or an
integer value to be used as the degree of parallelism. Parallel
execution helps effectively use multiple CPUs and improve masking
performance. Refer to the Oracle Database parallel execution framework
when choosing an explicit degree of parallelism.

--post-masking-script [text]

A post-masking script, which can contain SQL and PL/SQL statements.
It’s executed after the core masking script generated using the
masking policy. It’s usually used to perform additional transformation
or cleanup work after masking.

--pre-masking-script [text]

A pre-masking script, which can contain SQL and PL/SQL statements.
It’s executed before the core masking script generated using the
masking policy. It’s usually used to perform any preparation or
prerequisite work before masking data.

--recompile [text]

Specifies how to recompile invalid objects post data masking. Allowed
values are ‘SERIAL’ (recompile in serial), ‘PARALLEL’ (recompile in
parallel), ‘NONE’ (do not recompile). If it’s set to PARALLEL, the
value of parallelDegree attribute is used. Use the built-in UTL_RECOMP
package to recompile any remaining invalid objects after masking
completes.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED, SUSPENDED, SUSPENDING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci data-safe masking-policy create --generate-param-json-input column-source > column-source.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/masking-policy/create.html#cmdoption-compartment-id
       export column_source_target_id=<substitute-value-of-column_source_target_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/masking-policy/update-masking-policy-update-column-source-target-details.html#cmdoption-column-source-target-id

       masking_policy_id=$(oci data-safe masking-policy create --column-source file://column-source.json --compartment-id $compartment_id --query data.id --raw-output)

       oci data-safe masking-policy update-masking-policy-update-column-source-target-details --column-source-target-id $column_source_target_id --masking-policy-id $masking_policy_id
