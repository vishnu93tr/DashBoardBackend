"query-warehouse-data-templatized-query"
****************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Queries Warehouse data objects (e.g: views, tables) with the inputs
provided and sends the result set back. Any data to which an
OperationsInsightsWarehouseUser with a permission to the corresponding
Warehouse can be queried.


Usage
=====

   oci opsi opsi-warehouse-data-objects query-warehouse-data-templatized-query [OPTIONS]


Required Parameters
===================

--warehouse-id [text]

The OCID of a Warehouse.

--warehouse-type [text]

Type of the Warehouse.

Accepted values are:

   awrHubs


Optional Parameters
===================

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--limit [integer]

For list pagination. The maximum number of results per page, or items
to return in a paginated “List” call. For important details about how
pagination works, see List Pagination. Example: *50*

--page [text]

For list pagination. The value of the *opc-next-page* response header
from the previous “List” call. For important details about how
pagination works, see List Pagination.

--query-bind-params [complex type]

List of bind parameters to be applied in the query.

This option is a JSON list with items of type DataObjectBindParameter.
For documentation on DataObjectBindParameter please see our API
reference: https://docs.cloud.oracle.com/api/#/en/operationsinsights/
20200630/datatypes/DataObjectBindParameter. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--query-from-clause [text]

Unique data object name that will be added into the FROM clause of the
query, just like a view name in FROM clause. - Use actual name of the
data objects (e.g: tables, views) in case of Warehouse (e.g: Awr hub)
data objects query. SCHEMA.VIEW name syntax can also be used here.
e.g: SYS.DBA_HIST_SNAPSHOT or DBA_HIST_SNAPSHOT - Use name of the data
object (e.g: SQL_STATS_DO) in case of OPSI data objects. Identifier of
the OPSI data object cannot be used here.

--query-group-by-list [complex type]

List of items to be added into the GROUP BY clause of the query; items
will be added with comma separation. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--query-having-conditions-list [complex type]

List of items to be added into the HAVING clause of the query; items
will be added with AND separation. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--query-order-by-list [complex type]

List of items to be added into the ORDER BY clause of the query; items
will be added with comma separation. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--query-query-execution-timeout-in-seconds [text]

Timeout (in seconds) to be set for the data object query execution.

--query-select-list [complex type]

List of items to be added into the SELECT clause of the query; items
will be added with comma separation. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--query-time-filters [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--query-where-conditions-list [complex type]

List of items to be added into the WHERE clause of the query; items
will be added with AND separation. Item can contain a single condition
or multiple conditions. Single condition e.g:
“optimizer_mode=’mode1’” Multiple conditions e.g: (module=’module1’ OR
module=’module2’) This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export warehouse_id=<substitute-value-of-warehouse_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/opsi/opsi-warehouse-data-objects/query-warehouse-data-templatized-query.html#cmdoption-warehouse-id
       export warehouse_type=<substitute-value-of-warehouse_type> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/opsi/opsi-warehouse-data-objects/query-warehouse-data-templatized-query.html#cmdoption-warehouse-type

       oci opsi opsi-warehouse-data-objects query-warehouse-data-templatized-query --warehouse-id $warehouse_id --warehouse-type $warehouse_type
