"list-sql-texts"
****************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Query SQL Warehouse to get the full SQL Text for a SQL in a
compartment and in all sub-compartments if specified.


Usage
=====

   oci opsi database-insights list-sql-texts [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment.

--sql-identifier [text]

One or more unique SQL_IDs for a SQL Statement. Example:
*6rgjh9bjmy2s7*


Optional Parameters
===================

--all

Fetches all pages of results.

--compartment-id-in-subtree [boolean]

A flag to search all resources within a given compartment and all sub-
compartments.

--database-id [text]

Optional list of database OCIDs of the assosicated DBaaS entity.

--defined-tag-equals [text]

A list of tag filters to apply.  Only resources with a defined tag
matching the value will be returned. Each item in the list has the
format “{namespace}.{tagName}.{value}”.  All inputs are case-
insensitive. Multiple values for the same key (i.e. same namespace and
tag name) are interpreted as “OR”. Values for different keys (i.e.
different namespaces, different tag names, or both) are interpreted as
“AND”.

--defined-tag-exists [text]

A list of tag existence filters to apply.  Only resources for which
the specified defined tags exist will be returned. Each item in the
list has the format “{namespace}.{tagName}.true” (for checking
existence of a defined tag) or “{namespace}.true”.  All inputs are
case-insensitive. Currently, only existence (“true” at the end) is
supported. Absence (“false” at the end) is not supported. Multiple
values for the same key (i.e. same namespace and tag name) are
interpreted as “OR”. Values for different keys (i.e. different
namespaces, different tag names, or both) are interpreted as “AND”.

--freeform-tag-equals [text]

A list of tag filters to apply.  Only resources with a freeform tag
matching the value will be returned. The key for each tag is
“{tagName}.{value}”.  All inputs are case-insensitive. Multiple values
for the same tag name are interpreted as “OR”.  Values for different
tag names are interpreted as “AND”.

--freeform-tag-exists [text]

A list of tag existence filters to apply.  Only resources for which
the specified freeform tags exist the value will be returned. The key
for each tag is “{tagName}.true”.  All inputs are case-insensitive.
Currently, only existence (“true” at the end) is supported. Absence
(“false” at the end) is not supported. Multiple values for different
tag names are interpreted as “AND”.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--id [text]

Optional list of database OCIDs of the database insight resource.

--page [text]

For list pagination. The value of the *opc-next-page* response header
from the previous “List” call. For important details about how
pagination works, see List Pagination.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/opsi/database-insights/list-sql-texts.html#cmdoption-compartment-id
       export sql_identifier=<substitute-value-of-sql_identifier> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/opsi/database-insights/list-sql-texts.html#cmdoption-sql-identifier

       oci opsi database-insights list-sql-texts --compartment-id $compartment_id --sql-identifier $sql_identifier
