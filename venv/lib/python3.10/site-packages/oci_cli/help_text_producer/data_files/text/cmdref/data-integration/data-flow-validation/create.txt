"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Accepts the data flow definition in the request payload and creates a
data flow validation.


Usage
=====

   oci data-integration data-flow-validation create [OPTIONS]


Required Parameters
===================

--workspace-id [text]

The workspace ID.


Optional Parameters
===================

--description [text]

Detailed description for the object.

--flow-config-values [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--identifier [text]

Value can only contain upper case letters, underscore, and numbers. It
should begin with upper case letter or underscore. The value can be
modified.

--key [text]

Generated key that can be used in API calls to identify data flow. On
scenarios where reference to the data flow is needed, a value can be
passed in create.

--key-map [complex type]

A key map. If provided, key is replaced with generated key. This
structure provides mapping between user provided key and generated
key. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--metadata [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--model-type [text]

The type of the object.

--model-version [text]

The model version of an object.

--name [text]

Free form text without any restriction on permitted characters. Name
can have letters, numbers, and special characters. The value is
editable and is restricted to 1000 characters.

--nodes [complex type]

An array of nodes.

This option is a JSON list with items of type FlowNode.  For
documentation on FlowNode please see our API reference: https://docs.
cloud.oracle.com/api/#/en/dataintegration/20200430/datatypes/FlowNode.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--object-status [integer]

The status of an object that can be set to value 1 for shallow
references across objects, other values reserved.

--object-version [integer]

The version of the object that is used to track changes in the object
instance.

--parameters [complex type]

An array of parameters.

This option is a JSON list with items of type Parameter.  For
documentation on Parameter please see our API reference: https://docs
.cloud.oracle.com/api/#/en/dataintegration/20200430/datatypes/Paramet
er. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--parent-ref [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--target-field-map-summary [complex type]

A hash map that maps TypedObject keys to a field map that maps to the
typed object as a target, for java sdk.

This option is a JSON dictionary of type dict(str, FieldMapWrapper).
For documentation on FieldMapWrapper please see our API reference: ht
tps://docs.cloud.oracle.com/api/#/en/dataintegration/20200430/datatyp
es/FieldMapWrapper. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--typed-object-map [complex type]

A hash map that maps TypedObject keys to the object itself, for java
sdk.

This option is a JSON dictionary of type dict(str,
TypedObjectWrapper).  For documentation on TypedObjectWrapper please
see our API reference: https://docs.cloud.oracle.com/api/#/en/dataint
egration/20200430/datatypes/TypedObjectWrapper. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/workspace/create.html#cmdoption-compartment-id
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/workspace/create.html#cmdoption-display-name
       export is_private_network=<substitute-value-of-is_private_network> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-integration/workspace/create.html#cmdoption-is-private-network

       workspace_id=$(oci data-integration workspace create --compartment-id $compartment_id --display-name $display_name --is-private-network $is_private_network --query data.id --raw-output)

       oci data-integration data-flow-validation create --workspace-id $workspace_id
