"create-oke-helm-chart-stage"
*****************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new deployment stage.


Usage
=====

   oci devops deploy-stage create-oke-helm-chart-stage [OPTIONS]


Required Parameters
===================

--helm-chart-artifact-id [text]

Helm chart artifact OCID.

--oke-cluster-environment-id [text]

Kubernetes cluster environment OCID for deployment.

--pipeline-id [text]

The OCID of a pipeline.

--release-name [text]

Default name of the chart instance. Must be unique within a Kubernetes
namespace.

--stage-predecessor-collection [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--cleanup-on-fail [boolean]

Passes the –cleanup-on-fail flag for helm upgrade. Set to false by
default

--debug-helm [boolean]

Passes the –debug flag for helm upgrade. Set to false by default

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. See Resource Tags. Example: *{“foo-namespace”: {“bar-key”:
“value”}}* This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Optional description about the deployment stage.

--display-name [text]

Deployment stage display name, which can be renamed and is not
necessarily unique. Avoid entering confidential information.

--force-helm [boolean]

Passes the –force flag for helm upgrade. Set to false by default

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only.  See Resource
Tags. Example: *{“bar-key”: “value”}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--helm-command-artifact-ids [complex type]

List of Helm command artifact OCIDs. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--history-max [integer]

Passes the –history-max flag for helm upgrade. Set to 10 by default

--is-uninstall-on-stage-delete [boolean]

Uninstall the Helm chart release on deleting the stage.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--namespace [text]

Default namespace to be used for Kubernetes deployment when not
specified in the manifest.

--no-hooks [boolean]

Passes the –no-hooks flag for helm upgrade. Set to true by default

--purpose [text]

The purpose of running this Helm stage

Accepted values are:

   EXECUTE_HELM_COMMAND, EXECUTE_HELM_UPGRADE

--render-subchart-notes [boolean]

Passes the –render-subchart-notes flag for helm upgrade. Set to true
by default

--reset-values [boolean]

Passes the –reset-values flag for helm upgrade. Set to false by
default

--reuse-values [boolean]

Passes the –reuse-values flag for helm upgrade. Set to false by
default

--rollback-policy [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--set-string [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--set-values [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--skip-crds [boolean]

Passes the –skip-crds flag for helm upgrade. Set to false by default

--timeout-in-seconds [integer]

Time to wait for execution of a helm stage. Defaults to 300 seconds.

--values-artifact-ids [complex type]

List of values.yaml file artifact OCIDs. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, NEEDS_ATTENTION, SUCCEEDED, WAITING

--wait-helm [boolean]

Passes the –wait flag for helm upgrade. Set to true by default

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci devops deploy-stage create-oke-helm-chart-stage --generate-param-json-input stage-predecessor-collection > stage-predecessor-collection.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export helm_chart_artifact_id=<substitute-value-of-helm_chart_artifact_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/devops/deploy-stage/create-oke-helm-chart-stage.html#cmdoption-helm-chart-artifact-id
       export oke_cluster_environment_id=<substitute-value-of-oke_cluster_environment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/devops/deploy-stage/create-oke-helm-chart-stage.html#cmdoption-oke-cluster-environment-id
       export pipeline_id=<substitute-value-of-pipeline_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/devops/deploy-stage/create-oke-helm-chart-stage.html#cmdoption-pipeline-id
       export release_name=<substitute-value-of-release_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/devops/deploy-stage/create-oke-helm-chart-stage.html#cmdoption-release-name

       oci devops deploy-stage create-oke-helm-chart-stage --helm-chart-artifact-id $helm_chart_artifact_id --oke-cluster-environment-id $oke_cluster_environment_id --pipeline-id $pipeline_id --release-name $release_name --stage-predecessor-collection file://stage-predecessor-collection.json
