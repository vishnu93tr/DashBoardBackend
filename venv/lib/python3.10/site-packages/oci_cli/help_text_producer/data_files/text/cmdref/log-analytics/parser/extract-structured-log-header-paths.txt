"extract-structured-log-header-paths"
*************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Extracts the header paths from the example json or xml content.


Usage
=====

   oci log-analytics parser extract-structured-log-header-paths [OPTIONS]


Required Parameters
===================

--namespace-name [text]

The Logging Analytics namespace used for the request.


Optional Parameters
===================

--categories [complex type]

An array of categories assigned to this parser. The isSystem flag
denotes if each category assignment is user-created or Oracle-defined.

This option is a JSON list with items of type LogAnalyticsCategory.
For documentation on LogAnalyticsCategory please see our API
reference: https://docs.cloud.oracle.com/api/#/en/loganalytics/202006
01/datatypes/LogAnalyticsCategory. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--content [text]

The content.

--dependent-parsers [complex type]

A list of sub parsers used by this parser.

This option is a JSON list with items of type DependentParser.  For
documentation on DependentParser please see our API reference: https:
//docs.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/Depe
ndentParser. This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--dependent-sources [complex type]

A list of sources that depend on the parser, either directly or
indirectly.

This option is a JSON list with items of type DependentSource.  For
documentation on DependentSource please see our API reference: https:
//docs.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/Depe
ndentSource. This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

The parser description.

--display-name [text]

The parser display name.

--edit-version [integer]

The parser edit version.

--encoding [text]

The encoding.

--example-content [text]

The example content.

--field-delimiter [text]

The parser field delimiter.

--field-maps [complex type]

The parser fields.

This option is a JSON list with items of type LogAnalyticsParserField.
For documentation on LogAnalyticsParserField please see our API
reference: https://docs.cloud.oracle.com/api/#/en/loganalytics/202006
01/datatypes/LogAnalyticsParserField. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--field-qualifier [text]

The parser field qualifier.

--footer-content [text]

The footer regular expression.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--header-content [text]

The header content.

--is-default [boolean]

A flag indicating if this is a default parser.

--is-hidden [boolean]

A flag indicating if the parser is hidden or not.

--is-namespace-aware [boolean]

A flag indicating whether the XML parser should consider the
namespace(s) while processing the log data.

--is-parser-written-once [boolean]

A flag indicating whther or not the parser is write once.

--is-position-aware [boolean]

A flag indicating whether the parser is positionally aware.

--is-single-line-content [boolean]

A flag indicating if this is a single line content parser.

--is-system [boolean]

The system flag.  A value of false denotes a custom, or user defined
object.  A value of true denotes a built in object.

--is-user-deleted [boolean]

A flag indicating whether or not the parser has been deleted.

--language [text]

The language.

--log-type-test-request-version [integer]

The log type test request .

--mapped-parsers [complex type]

The mapped parser list.

This option is a JSON list with items of type LogAnalyticsParser.  For
documentation on LogAnalyticsParser please see our API reference: htt
ps://docs.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/L
ogAnalyticsParser. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--name [text]

The parser name.

--parser-filter [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--parser-functions [complex type]

The parser function list.

This option is a JSON list with items of type
LogAnalyticsParserFunction.  For documentation on
LogAnalyticsParserFunction please see our API reference: https://docs
.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/LogAnalyti
csParserFunction. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--parser-ignoreline-chars [text]

Ignore line characters

--parser-sequence [integer]

The parser sequence.

--parser-timezone [text]

The time zone.

--parser-type [text]

The parser type - possible values are XML, JSON or DELIMITED.

Accepted values are:

   DELIMITED, JSON, XML

--sources [complex type]

The list of sources using this parser.

This option is a JSON list with items of type LogAnalyticsSource.  For
documentation on LogAnalyticsSource please see our API reference: htt
ps://docs.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/L
ogAnalyticsSource. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--sources-count [integer]

The number of sources using this parser

--time-updated [datetime]

The last updated date.

   The following datetime formats are supported:


UTC with microseconds
---------------------

   Format: YYYY-MM-DDTHH:mm:ss.ssssssTZD
   Example: 2017-09-15T20:30:00.123456Z

   UTC with milliseconds
   ***********************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ss.sssTZD
       Example: 2017-09-15T20:30:00.123Z

   UTC without milliseconds
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T20:30:00Z

   UTC with minute precision
   **************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T20:30Z


Timezone with microseconds
--------------------------

   Format: YYYY-MM-DDTHH:mm:ssTZD
   Example: 2017-09-15T12:30:00.456789-08:00, 2017-09-15T12:30:00.456789-0800

   Timezone with milliseconds
   ***************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

   Timezone without milliseconds
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mm:ssTZD
       Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

   Timezone with minute precision
   *******************************
   .. code::

       Format: YYYY-MM-DDTHH:mmTZD
       Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   Short date and time
   ********************
   The timezone for this date and time will be taken as UTC (Needs to be surrounded by single or double quotes)

   .. code::

       Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
       Example: '2017-09-15 17:25'

   Date Only
   **********
   This date will be taken as midnight UTC of that day

   .. code::

       Format: YYYY-MM-DD
       Example: 2017-09-15

   Epoch seconds
   **************
   .. code::

       Example: 1412195400

--tokenize-original-text [text]

Tokenize original text: true/false

--type [text]

The parser type. Default value is REGEX.

Accepted values are:

   DELIMITED, JSON, ODL, REGEX, XML


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export namespace_name=<substitute-value-of-namespace_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/parser/extract-structured-log-header-paths.html#cmdoption-namespace-name

       oci log-analytics parser extract-structured-log-header-paths --namespace-name $namespace_name
