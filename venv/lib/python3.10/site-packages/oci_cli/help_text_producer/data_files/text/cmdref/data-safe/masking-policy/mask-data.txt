"mask-data"
***********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Masks data using the specified masking policy.


Usage
=====

   oci data-safe masking-policy mask-data [OPTIONS]


Required Parameters
===================

--masking-policy-id [text]

The OCID of the masking policy.


Optional Parameters
===================

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-decrypt [boolean]

Indicates if the masking request is to decrypt the data values
previously encrypted using Deterministic Encryption. Note that, to
correctly decrypt the encrypted data values, it requires the same seed
value that was provided to encrypt those data values.

--is-drop-temp-tables-enabled [boolean]

Indicates if the temporary tables created during a masking operation
should be dropped after masking. Set this attribute to false to
preserve the temporary tables. Masking creates temporary tables that
map the original sensitive data values to mask values. These temporary
tables are dropped after masking if this attribute is set as true.
But, in some cases, you may want to preserve this information to track
how masking changed your data. Note that doing so compromises
security. These tables must be dropped before the database is
available for unprivileged users. If it’s not provided, the value of
the isDropTempTablesEnabled attribute in the MaskingPolicy resource is
used.

--is-execute-saved-script-enabled [boolean]

Indicates if data masking should be performed using a saved masking
script. Setting this attribute to true skips masking script generation
and executes the masking script stored in the Data Safe repository. It
helps save time if there are no changes in the database tables and
their dependencies.

--is-ignore-errors-enabled [boolean]

Indicates if the masking process should continue on hitting an error.
It provides fault tolerance support and is enabled by default. In
fault-tolerant mode, the masking process saves the failed step and
continues. You can then submit another masking request (with isRerun
attribute set to true) to execute only the failed steps.

--is-move-interim-tables-enabled [boolean]

Indicates if the interim DMASK tables should be moved to the user-
specified tablespace. As interim tables can be large in size, set it
to false if moving them causes performance overhead during masking.

--is-redo-logging-enabled [boolean]

Indicates if redo logging is enabled during a masking operation. Set
this attribute to true to enable redo logging. If set as false,
masking disables redo logging and flashback logging to purge any
original unmasked data from logs. However, in certain circumstances
when you only want to test masking, rollback changes, and retry
masking, you could enable logging and use a flashback database to
retrieve the original unmasked data after it has been masked. If it’s
not provided, the value of the isRedoLoggingEnabled attribute in the
MaskingPolicy resource is used.

--is-refresh-stats-enabled [boolean]

Indicates if statistics gathering is enabled. Set this attribute to
false to disable statistics gathering. The masking process gathers
statistics on masked database tables after masking completes. If it’s
not provided, the value of the isRefreshStatsEnabled attribute in the
MaskingPolicy resource is used.

--is-rerun [boolean]

Indicates if the masking request is to rerun the previously failed
masking steps. If a masking request is submitted with the
isIgnoreErrorsEnabled attribute set to true, the masking process
tracks the failed masking steps. Another masking request can be
submitted with the isRun attribute set to true to rerun those failed
masking steps. It helps save time by executing only the failed masking
steps and not doing the whole masking again.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--parallel-degree [text]

Specifies options to enable parallel execution when running data
masking. Allowed values are ‘NONE’ (no parallelism), ‘DEFAULT’ (the
Oracle Database computes the optimum degree of parallelism) or an
integer value to be used as the degree of parallelism. Parallel
execution helps effectively use multiple CPUs and improve masking
performance. Refer to the Oracle Database parallel execution framework
when choosing an explicit degree of parallelism. https://www.oracle.c
om/pls/topic/lookup?ctx=dblatest&en/database/oracle/oracle-database&id
=VLDBG-GUID-3E2AE088-2505-465E-A8B2-AC38813EA355 If it’s not provided,
the value of the parallelDegree attribute in the MaskingPolicy
resource is used.

--re-run-from-step [text]

Specifies the step from which masking needs to be rerun. This param
will be used only when isRerun attribute is true. If
PRE_MASKING_SCRIPT is passed, it will rerun the pre-masking script,
followed by masking, and then the post-masking script. If
POST_MASKING_SCRIPT is passed, it will rerun only the post-masking
script. If this field is not set and isRerun is set to true, then it
will default to the last failed step.

Accepted values are:

   POST_MASKING_SCRIPT, PRE_MASKING_SCRIPT

--recompile [text]

Specifies how to recompile invalid objects post data masking. Allowed
values are ‘SERIAL’ (recompile in serial), ‘PARALLEL’ (recompile in
parallel), ‘NONE’ (do not recompile). If it’s set to PARALLEL, the
value of parallelDegree attribute is used. Use the built-in UTL_RECOMP
package to recompile any remaining invalid objects after masking
completes. If it’s not provided, the value of the parallelDegree
attribute in the MaskingPolicy resource is used.

--seed [text]

The seed value to be used in case of Deterministic Encryption and
Deterministic Substitution masking formats.

--tablespace [text]

The tablespace that should be used to create the mapping tables, DMASK
objects, and other temporary tables for data masking. If no tablespace
is provided, the DEFAULT tablespace is used.

--target-id [text]

The OCID of the target database to be masked. If it’s not provided,
the value of the targetId attribute in the MaskingPolicy resource is
used. The OCID of the target database to be masked. If it’s not
provided, the value of the targetId attribute in the MaskingPolicy
resource is used.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED, SUSPENDED, SUSPENDING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci data-safe masking-policy create --generate-param-json-input column-source > column-source.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-safe/masking-policy/create.html#cmdoption-compartment-id

       masking_policy_id=$(oci data-safe masking-policy create --column-source file://column-source.json --compartment-id $compartment_id --query data.id --raw-output)

       oci data-safe masking-policy mask-data --masking-policy-id $masking_policy_id
