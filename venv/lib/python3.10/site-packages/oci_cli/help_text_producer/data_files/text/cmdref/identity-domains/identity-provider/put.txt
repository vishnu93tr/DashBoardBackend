"put"
*****

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Replace an Identity Provider

The top level –endpoint parameter must be supplied for this operation.


Usage
=====

   oci identity-domains identity-provider put [OPTIONS]


Required Parameters
===================

--enabled [boolean]

Set to true to indicate Partner enabled.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: true  -
returned: default  - type: boolean  - uniqueness: none

--identity-provider-id [text]

ID of the resource

--partner-name [text]

Unique name of the trusted Identity Provider.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: true  -
returned: always  - type: string  - uniqueness: server

--schemas [complex type]

REQUIRED. The schemas attribute is an array of Strings which allows
introspection of the supported schema version for a SCIM
representation as well any schema extensions supported by that
representation. Each String value must be a unique URI. This
specification defines URIs for User, Group, and a standard
“enterprise” extension. All representations of SCIM schema MUST
include a non-zero value array with value(s) of the URIs supported by
that representation. Duplicate values MUST NOT be included. Value
order is not specified and MUST not impact behavior.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: true  - mutability: readWrite  - required: true  -
returned: default  - type: string  - uniqueness: none This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--assertion-attribute [text]

Assertion attribute name.

**Deprecated Since: 20.1.3**

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none  -
idcsValuePersistedInOtherAttribute: true

--attribute-sets [text]

A multi-valued list of strings indicating the return type of attribute
definition. The specified set of attributes can be fetched by the
return type of the attribute. One or more values can be given together
to fetch more than one group of attributes. If ‘attributes’ query
parameter is also available, union of the two is fetched. Valid values
- all, always, never, request, default. Values are case-insensitive.

Accepted values are:

   all, always, default, never, request

--attributes [text]

A comma-delimited string that specifies the names of resource
attributes that should be returned in the response. By default, a
response that contains resource attributes contains only attributes
that are defined in the schema for that resource type as
returned=always or returned=default. An attribute that is defined as
returned=request is returned in a response only if the request
specifies its name in the value of this query parameter. If a request
specifies this query parameter, the response contains the attributes
that this query parameter specifies, as well as any attribute that is
defined as returned=always.

--authn-request-binding [text]

HTTP binding to use for authentication requests.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

Accepted values are:

   Post, Redirect

--authorization [text]

The Authorization field value consists of credentials containing the
authentication information of the user agent for the realm of the
resource being requested.

--compartment-ocid [text]

OCI Compartment Id (ocid) in which the resource lives.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: string  - uniqueness: none

--correlation-policy [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--delete-in-progress [boolean]

A boolean flag indicating this resource in the process of being
deleted. Usually set to true when synchronous deletion of the resource
would take too long.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--description [text]

Description

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--domain-ocid [text]

OCI Domain Id (ocid) in which the resource lives.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: string  - uniqueness: none

--encryption-certificate [text]

Encryption certificate

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--ext-social-identity-provider [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--ext-x509-identity-provider [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--external-id [text]

An identifier for the Resource as defined by the Service Consumer. The
externalId may simplify identification of the Resource between Service
Consumer and Service Provider by allowing the Consumer to refer to the
Resource with its own identifier, obviating the need to store a local
mapping between the local identifier of the Resource and the
identifier used by the Service Provider. Each Resource MAY include a
non-empty externalId value. The value of the externalId attribute is
always issued by the Service Consumer and can never be specified by
the Service Provider. The Service Provider MUST always interpret the
externalId as scoped to the Service Consumer’s tenant.

**SCIM++ Properties:**  - caseExact: false  - multiValued: false  -
mutability: readWrite  - required: false  - returned: default  - type:
string  - uniqueness: none

--force

Perform update without prompting for confirmation.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--icon-url [text]

Identity Provider Icon URL.

**SCIM++ Properties:**  - idcsSearchable: false  - multiValued: false
- mutability: readWrite  - required: false  - returned: default  -
type: string  - uniqueness: none

--id [text]

Unique identifier for the SCIM Resource as defined by the Service
Provider. Each representation of the Resource MUST include a non-empty
id value. This identifier MUST be unique across the Service Provider’s
entire set of Resources. It MUST be a stable, non-reassignable
identifier that does not change when the same Resource is returned in
subsequent requests. The value of the id attribute is always issued by
the Service Provider and MUST never be specified by the Service
Consumer. bulkId: is a reserved keyword and MUST NOT be used in the
unique identifier.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: always  - type: string  - uniqueness: global

--idcs-created-by [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--idcs-last-modified-by [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--idcs-last-upgraded-in-release [text]

The release number when the resource was upgraded.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: request  - type: string  - uniqueness: none

--idcs-prevented-operations [text]

Each value of this attribute specifies an operation that only an
internal client may perform on this particular resource.

**SCIM++ Properties:**  - idcsSearchable: false  - multiValued: true
- mutability: readOnly  - required: false  - returned: request  -
type: string  - uniqueness: none

Accepted values are:

   delete, replace, update

--idp-sso-url [text]

Identity Provider SSO URL

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--if-match [text]

Used to make the request conditional on an ETag

--include-signing-cert-in-signature [boolean]

Set to true to include the signing certificate in the signature.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--jit-user-prov-assigned-groups [complex type]

Refers to every group of which a JIT-provisioned User should be a
member.  Just-in-Time user-provisioning applies this static list when
jitUserProvGroupStaticListEnabled:true.

**Added In:** 20.1.3

**SCIM++ Properties:**  - idcsCompositeKey: [value]  - idcsSearchable:
false  - multiValued: true  - mutability: readWrite  - required: false
- returned: default  - type: complex  - uniqueness: none

This option is a JSON list with items of type
IdentityProviderJitUserProvAssignedGroups.  For documentation on
IdentityProviderJitUserProvAssignedGroups please see our API
reference: https://docs.cloud.oracle.com/api/#/en/identitydomains/v1/
datatypes/IdentityProviderJitUserProvAssignedGroups. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--jit-user-prov-attribute-update-enabled [boolean]

Set to true to indicate JIT User Creation is enabled

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--jit-user-prov-attributes [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--jit-user-prov-create-user-enabled [boolean]

Set to true to indicate JIT User Creation is enabled

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--jit-user-prov-enabled [boolean]

Set to true to indicate JIT User Provisioning is enabled

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--jit-user-prov-group-assertion-attribute-enabled [boolean]

Set to true to indicate JIT User Provisioning Groups should be
assigned based on assertion attribute

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--jit-user-prov-group-assignment-method [text]

The default value is ‘Overwrite’, which tells Just-In-Time user-
provisioning to replace any current group-assignments for a User with
those assigned by assertions and/or those assigned statically. Specify
‘Merge’ if you want Just-In-Time user-provisioning to combine its
group-assignments with those the user already has.

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

Accepted values are:

   Merge, Overwrite

--jit-user-prov-group-mapping-mode [text]

Property to indicate the mode of group mapping

**Added In:** 2205120021

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

Accepted values are:

   explicit, implicit

--jit-user-prov-group-mappings [complex type]

The list of mappings between the Identity Domain Group and the IDP
group.

**Added In:** 2205120021

**SCIM++ Properties:**  - idcsCompositeKey: [idpGroup]  - multiValued:
true  - mutability: readWrite  - required: false  - returned: default
- type: complex  - uniqueness: none

This option is a JSON list with items of type
IdentityProviderJitUserProvGroupMappings.  For documentation on
IdentityProviderJitUserProvGroupMappings please see our API reference:
https://docs.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/I
dentityProviderJitUserProvGroupMappings. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--jit-user-prov-group-saml-attribute-name [text]

Name of the assertion attribute containing the users groups

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--jit-user-prov-group-static-list-enabled [boolean]

Set to true to indicate JIT User Provisioning Groups should be
assigned from a static list

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--jit-user-prov-ignore-error-on-absent-groups [boolean]

Set to true to indicate ignoring absence of group while provisioning

**Added In:** 2111112015

**SCIM++ Properties:**  - caseExact: false  - idcsAddedSinceVersion:
30  - idcsSearchable: false  - multiValued: false  - mutability:
readWrite  - required: false  - returned: default  - type: boolean  -
uniqueness: none

--last-notification-sent-time [text]

Records the notification timestamp for the IdP whose signing
certificate is about to expire

**Added In:** 2302092332

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: dateTime  - uniqueness: none

--logout-binding [text]

HTTP binding to use for logout.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

Accepted values are:

   Post, Redirect

--logout-enabled [boolean]

Set to true to enable logout.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--logout-request-url [text]

Logout request URL

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--logout-response-url [text]

Logout response URL

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--meta [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--metadata [text]

Metadata

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--name-id-format [text]

Default authentication request name ID format.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--ocid [text]

Unique OCI identifier for the SCIM Resource.

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: true  -
multiValued: false  - mutability: immutable  - required: false  -
returned: default  - type: string  - uniqueness: global

--partner-provider-id [text]

Provider ID

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: server

--requested-authentication-context [complex type]

SAML SP authentication type.

**Added In:** 2102181953

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: false  -
multiValued: true  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--require-force-authn [boolean]

This SP requires requests SAML IdP to enforce re-authentication.

**Added In:** 2102181953

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--requires-encrypted-assertion [boolean]

SAML SP must accept encrypted assertion only.

**Added In:** 2102181953

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--resource-type-schema-version [text]

An endpoint-specific schema version number to use in the Request.
Allowed version values are Earliest Version or Latest Version as
specified in each REST API endpoint description, or any sequential
number inbetween. All schema attributes/body parameters are a part of
version 1. After version 1, any attributes added or deprecated will be
tagged with the version that they were added to or deprecated in. If
no version is provided, the latest schema version is returned.

--saml-ho-k-required [boolean]

SAML SP HoK Enabled.

**Added In:** 2102181953

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--service-instance-identifier [text]

The serviceInstanceIdentifier of the App that hosts this IdP. This
value will match the opcServiceInstanceGUID of any service-instance
that the IdP represents.

**Added In:** 18.2.6

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: never  - type: string  - uniqueness: server

--shown-on-login-page [boolean]

Set to true to indicate whether to show IdP in login page or not.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: boolean  - uniqueness: none

--signature-hash-algorithm [text]

Signature hash algorithm.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

Accepted values are:

   SHA-1, SHA-256

--signing-certificate [text]

Signing certificate

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none

--succinct-id [text]

Succinct ID

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: server

--tags [complex type]

A list of tags on this resource.

**SCIM++ Properties:**  - idcsCompositeKey: [key, value]  -
idcsSearchable: true  - multiValued: true  - mutability: readWrite  -
required: false  - returned: request  - type: complex  - uniqueness:
none

This option is a JSON list with items of type Tags.  For documentation
on tags please see our API reference: https://docs.cloud.oracle.com/a
pi/#/en/identitydomains/v1/datatypes/Tags. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--tenancy-ocid [text]

OCI Tenant Id (ocid) in which the resource lives.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: string  - uniqueness: none

--tenant-provider-id [text]

The alternate Provider ID to be used as the Oracle Identity Cloud
Service providerID (instead of the one in SamlSettings) when
interacting with this IdP.

**Added In:** 19.2.1

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: false  -
multiValued: false  - mutability: readOnly  - required: false  -
returned: default  - type: string  - uniqueness: none

--type [text]

Identity Provider Type

**Added In:** 20.1.3

**SCIM++ Properties:**  - caseExact: true  - idcsSearchable: true  -
multiValued: false  - mutability: immutable  - required: false  -
returned: always  - type: string  - uniqueness: none

Accepted values are:

   IWA, LOCAL, SAML, SOCIAL, X509

--user-mapping-method [text]

User mapping method.

**Deprecated Since: 20.1.3**

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none  -
idcsValuePersistedInOtherAttribute: true

Accepted values are:

   AssertionAttributeToUserAttribute, CorrelationPolicyRule, NameIDToUserAttribute

--user-mapping-store-attribute [text]

This property specifies the userstore attribute value that must match
the incoming assertion attribute value or the incoming nameid
attribute value in order to identify the user during SSO.<br>You can
construct the userMappingStoreAttribute value by specifying attributes
from the Oracle Identity Cloud Service Core Users schema. For examples
of how to construct the userMappingStoreAttribute value, see the
<b>Example of a Request Body</b> section of the Examples tab for the
<a href=’./op-admin-v1-identityproviders-post.html’>POST</a> and <a
href=’./op-admin-v1-identityproviders-id-put.html’>PUT</a> methods of
the /IdentityProviders endpoint.

**Deprecated Since: 20.1.3**

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: true  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: default  - type: string  - uniqueness: none  -
idcsValuePersistedInOtherAttribute: true


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci identity-domains identity-provider create --generate-param-json-input schemas > schemas.json

       oci identity-domains identity-provider put --generate-param-json-input schemas > schemas.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export enabled=<substitute-value-of-enabled> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/identity-domains/identity-provider/create.html#cmdoption-enabled
       export partner_name=<substitute-value-of-partner_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/identity-domains/identity-provider/create.html#cmdoption-partner-name

       identity_provider_id=$(oci identity-domains identity-provider create --enabled $enabled --partner-name $partner_name --schemas file://schemas.json --query data.id --raw-output)

       oci identity-domains identity-provider put --enabled $enabled --identity-provider-id $identity_provider_id --partner-name $partner_name --schemas file://schemas.json
