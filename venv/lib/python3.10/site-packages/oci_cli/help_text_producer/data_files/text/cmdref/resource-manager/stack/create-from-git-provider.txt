"create-from-git-provider"
**************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a stack in the specified compartment. You can create a stack
from a Terraform configuration. The Terraform configuration can be
directly uploaded or referenced from a source code control system. You
can also create a stack from an existing compartment, which generates
a Terraform configuration. You can also upload the Terraform
configuration from an Object Storage bucket. For more information, see
Creating Stacks.


Usage
=====

   oci resource-manager stack create-from-git-provider [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

Unique identifier (OCID) of the compartment in which the stack
resides.

--config-source-configuration-source-provider-id [text]

Unique identifier (OCID) for the Git configuration source.


Optional Parameters
===================

--config-source-branch-name [text]

The name of the branch within the Git repository.

--config-source-repository-url [text]

The URL of the Git repository.

--config-source-working-directory [text]

File path to the directory to use for running Terraform. If not
specified, the root directory is used. Required when using a zip
Terraform configuration (*configSourceType* value of *ZIP_UPLOAD*)
that contains folders. Ignored for the *configSourceType* value of
*COMPARTMENT_CONFIG_SOURCE*. For more information about required and
recommended file structure, see File Structure (Terraform
Configurations for Resource Manager).

--custom-terraform-provider [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags associated with this resource. Each key is predefined and
scoped to a namespace. For more information, see Resource Tags.
Example: *{“Operations”: {“CostCenter”: “42”}}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Description of the stack.

--display-name [text]

The stack’s display name.

--freeform-tags [complex type]

Free-form tags associated with this resource. Each tag is a simple
key-value pair with no predefined name, type, or namespace. For more
information, see Resource Tags. Example: *{“Department”: “Finance”}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--terraform-version [text]

The version of Terraform to use with the stack. Example: *0.12.x*

--variables [complex type]

Terraform variables associated with this resource. Maximum number of
variables supported is 250. The maximum size of each variable,
including both name and value, is 8192 bytes. Example:
*{“CompartmentId”: “compartment-id-value”}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/resource-manager/stack/create-from-git-provider.html#cmdoption-compartment-id
       export config_source_configuration_source_provider_id=<substitute-value-of-config_source_configuration_source_provider_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/resource-manager/stack/create-from-git-provider.html#cmdoption-config-source-configuration-source-provider-id

       oci resource-manager stack create-from-git-provider --compartment-id $compartment_id --config-source-configuration-source-provider-id $config_source_configuration_source_provider_id
