"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new monitored resource for the given resource type with the
details and submits a work request for promoting the resource to
agent. Once the resource is successfully added to agent, resource
state will be marked active.


Usage
=====

   oci stack-monitoring resource create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

Compartment Identifier OCID.

--name [text]

Monitored Resource Name.

--type [text]

Monitored Resource Type.


Optional Parameters
===================

--additional-aliases [complex type]

List of MonitoredResourceAliasCredentials. This property complements
the existing “aliases” property by allowing user to specify more than
one credential alias. If both “aliases” and “additionalAliases” are
specified, union of the values is used as list of aliases applicable
for this resource. If any duplicate found in the combined list of
“alias” and “additionalAliases”, an error will be thrown.

This option is a JSON list with items of type
MonitoredResourceAliasCredential.  For documentation on
MonitoredResourceAliasCredential please see our API reference: https:
//docs.cloud.oracle.com/api/#/en/stackmonitoring/20210330/datatypes/M
onitoredResourceAliasCredential. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--additional-credentials [complex type]

List of MonitoredResourceCredentials. This property complements the
existing “credentials” property by allowing user to specify more than
one credential. If both “credential” and “additionalCredentials” are
specified, union of the values is used as list of credentials
applicable for this resource. If any duplicate found in the combined
list of “credentials” and “additionalCredentials”, an error will be
thrown.

This option is a JSON list with items of type
MonitoredResourceCredential.  For documentation on
MonitoredResourceCredential please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/stackmonitoring/20210330/datatypes/Monito
redResourceCredential. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--aliases [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--credentials [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--db-connection-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. Example: *{“foo-namespace”: {“bar-key”: “value”}}* This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

Monitored resource display name.

--external-id [text]

External resource is any OCI resource identifier OCID which is not a
Stack Monitoring service resource. Currently supports only OCI compute
instance.

--external-resource-id [text]

Generally used by DBaaS to send the Database OCID stored on the DBaaS.
The same will be passed to resource service to enable Stack Monitoring
Service on DBM. This will be stored in Stack Monitoring Resource
Service data store as identifier for monitored resource. If this
header is not set as part of the request, then an id will be generated
and stored for the resource.

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only. Example: *{“bar-
key”: “value”}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--host-name [text]

Host name of the monitored resource.

--license [text]

License edition of the monitored resource. If not provided the default
license type for the compartment will be used.

Accepted values are:

   ENTERPRISE_EDITION, ENTERPRISE_EDITION_FOR_GPU_INFRASTRUCTURE, STANDARD_EDITION

--management-agent-id [text]

Management Agent Identifier OCID.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--properties [complex type]

List of monitored resource properties.

This option is a JSON list with items of type
MonitoredResourceProperty.  For documentation on
MonitoredResourceProperty please see our API reference: https://docs.
cloud.oracle.com/api/#/en/stackmonitoring/20210330/datatypes/Monitore
dResourceProperty. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--resource-time-zone [text]

Time zone in the form of tz database canonical zone ID. Specifies the
preference with a value that uses the IANA Time Zone Database format
(x-obmcs-time-zone). For example - America/Los_Angeles

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, NEEDS_ATTENTION, SUCCEEDED, WAITING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
has reached the state defined by "--wait-for-state". Defaults to 30
seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource/create.html#cmdoption-compartment-id
       export name=<substitute-value-of-name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource/create.html#cmdoption-name
       export type=<substitute-value-of-type> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/stack-monitoring/resource/create.html#cmdoption-type

       oci stack-monitoring resource create --compartment-id $compartment_id --name $name --type $type
