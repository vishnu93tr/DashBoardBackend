"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a new export in the specified export set, path, and file
system.


Usage
=====

   oci fs export create [OPTIONS]


Required Parameters
===================

--export-set-id [text]

The OCID of this export’s export set.

--file-system-id [text]

The OCID of this export’s file system.

--path [text]

Path used to access the associated file system.

Avoid entering confidential information.

Example:

   /mediafiles


Optional Parameters
===================

--export-options [complex type]

Export options for the new export. For exports of mount targets with
IPv4 address, if client options are left unspecified, client options
would default to:

      [          {             “source” : “0.0.0.0/0”,
      “requirePrivilegedSourcePort” : false,             “access”:
      “READ_WRITE”,             “identitySquash”: “NONE”,
      “anonymousUid”: 65534,             “anonymousGid”: 65534,
      “isAnonymousAccessAllowed”: false,             “allowedAuth”:
      [“SYS”]           }        ]

   For exports of mount targets with IPv6 address, if client options
   are   left unspecified, client options would be an empty array,
   i.e. export   would not be visible to any clients.

   **Note:** Mount targets do not have Internet-routable IP
   addresses.  Therefore they will not be reachable from the
   Internet, even if an associated *ClientOptions* item has   a source
   of *0.0.0.0/0*.

   **If set to the empty array then the export will not be   visible
   to any clients.**

   The export’s *exportOptions* can be changed after creation   using
   the *UpdateExport* operation.

This option is a JSON list with items of type ClientOptions.  For
documentation on ClientOptions please see our API reference: https://
docs.cloud.oracle.com/api/#/en/filestorage/20171215/datatypes/ClientO
ptions. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-idmap-groups-for-sys-auth [boolean]

Whether or not the export should use ID mapping for Unix groups rather
than the group list provided within an NFS request’s RPC header. When
this flag is true the Unix UID from the RPC header is used to retrieve
the list of secondary groups from a the ID mapping subsystem. The
primary GID is always taken from the RPC header. If ID mapping is not
configured, incorrectly configured, unavailable, or cannot be used to
determine a list of secondary groups then an empty secondary group
list is used for authorization. If the number of groups exceeds the
limit of 256 groups, the list retrieved from LDAP is truncated to the
first 256 groups read.

--locks [complex type]

Locks associated with this resource.

This option is a JSON list with items of type ResourceLock.  For
documentation on ResourceLock please see our API reference: https://d
ocs.cloud.oracle.com/api/#/en/filestorage/20171215/datatypes/Resource
Lock. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource has
reached the lifecycle state defined by "--wait-for-state". Defaults to
30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export availability_domain=<substitute-value-of-availability_domain> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/fs/file-system/create.html#cmdoption-availability-domain
       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/fs/file-system/create.html#cmdoption-compartment-id
       export export_set_id=<substitute-value-of-export_set_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/fs/export/create.html#cmdoption-export-set-id
       export path=<substitute-value-of-path> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/fs/export/create.html#cmdoption-path

       file_system_id=$(oci fs file-system create --availability-domain $availability_domain --compartment-id $compartment_id --query data.id --raw-output)

       oci fs export create --export-set-id $export_set_id --file-system-id $file_system_id --path $path
