"upsert-parser"
***************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates or updates a parser, which defines how fields are extracted
from a log entry.


Usage
=====

   oci log-analytics parser upsert-parser [OPTIONS]


Required Parameters
===================

--namespace-name [text]

The Logging Analytics namespace used for the request.


Optional Parameters
===================

--categories [complex type]

An array of categories to assign to the parser. Specifying the name
attribute for each category would suffice. Oracle-defined category
assignments cannot be removed.

This option is a JSON list with items of type LogAnalyticsCategory.
For documentation on LogAnalyticsCategory please see our API
reference: https://docs.cloud.oracle.com/api/#/en/loganalytics/202006
01/datatypes/LogAnalyticsCategory. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--content [text]

The content.

--description [text]

The parser description.

--display-name [text]

The parser display name.

--edit-version [integer]

The parser edit version.

--encoding [text]

The encoding.

--example-content [text]

Example content.

--field-delimiter [text]

The parser field delimiter.

--field-maps [complex type]

The parser fields.

This option is a JSON list with items of type LogAnalyticsParserField.
For documentation on LogAnalyticsParserField please see our API
reference: https://docs.cloud.oracle.com/api/#/en/loganalytics/202006
01/datatypes/LogAnalyticsParserField. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--field-qualifier [text]

The parser field qualifier.

--footer-content [text]

The footer regular expression.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--header-content [text]

The header content.

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource. The resource will be
updated or deleted only if the etag you provide matches the resource’s
current etag value.

--is-default [boolean]

A flag indicating if this is a default parser.

--is-namespace-aware [boolean]

A flag indicating whether the XML parser should consider the
namespace(s) while processing the log data.

--is-parser-written-once [boolean]

A flag indicating whther or not the parser is write once.

--is-position-aware [boolean]

A flag indicating whether the parser is positionally aware.

--is-single-line-content [boolean]

A flag indicating if this is a single line content parser.

--is-system [boolean]

The system flag.  A value of false denotes a custom, or user defined
object.  A value of true denotes a built in object.

--language [text]

The language.

--log-type-test-request-version [integer]

The log type test request version.

--name [text]

The parser internal name.

--parser-functions [complex type]

The parser function list.

This option is a JSON list with items of type
LogAnalyticsParserFunction.  For documentation on
LogAnalyticsParserFunction please see our API reference: https://docs
.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/LogAnalyti
csParserFunction. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--parser-ignoreline-chars [text]

Ignore line characters

--parser-sequence [integer]

The parser sequence.

--parser-timezone [text]

The time zone.

--tokenize-original-text [text]

Tokenize original text: true/false

--type [text]

The parser type.  Default value is REGEX.

Accepted values are:

   DELIMITED, JSON, ODL, REGEX, XML


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export namespace_name=<substitute-value-of-namespace_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/log-analytics/parser/upsert-parser.html#cmdoption-namespace-name

       oci log-analytics parser upsert-parser --namespace-name $namespace_name
