"put"
*****

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Replace a Schema Def

The top level –endpoint parameter must be supplied for this operation.


Usage
=====

   oci identity-domains schema put [OPTIONS]


Required Parameters
===================

--idcs-mappable [boolean]

Specifies if the attributes in this schema can be used for mapping
with external identity sources such as AD or LDAP

**SCIM++ Properties:**  - caseExact: false  - multiValued: false  -
mutability: readOnly  - required: true  - returned: default  - type:
boolean  - uniqueness: none

--schema-id [text]

ID of the resource

--schemas [complex type]

REQUIRED. The schemas attribute is an array of Strings which allows
introspection of the supported schema version for a SCIM
representation as well any schema extensions supported by that
representation. Each String value must be a unique URI. This
specification defines URIs for User, Group, and a standard
“enterprise” extension. All representations of SCIM schema MUST
include a non-zero value array with value(s) of the URIs supported by
that representation. Duplicate values MUST NOT be included. Value
order is not specified and MUST not impact behavior.

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: true  - mutability: readWrite  - required: true  -
returned: default  - type: string  - uniqueness: none This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--attributes [complex type]

A complex type that specifies the set of Resource attributes

**SCIM++ Properties:**  - idcsCompositeKey: []  - multiValued: true  -
mutability: readWrite  - required: false  - returned: default  - type:
complex

This option is a JSON list with items of type SchemaAttributes.  For
documentation on SchemaAttributes please see our API reference: https
://docs.cloud.oracle.com/api/#/en/identitydomains/v1/datatypes/Schema
Attributes. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--authorization [text]

The Authorization field value consists of credentials containing the
authentication information of the user agent for the realm of the
resource being requested.

--description [text]

Schema’s human-readable description

**SCIM++ Properties:**  - caseExact: false  - multiValued: false  -
mutability: readWrite  - required: false  - returned: default  - type:
string  - uniqueness: none

--external-id [text]

An identifier for the Resource as defined by the Service Consumer. The
externalId may simplify identification of the Resource between Service
Consumer and Service Provider by allowing the Consumer to refer to the
Resource with its own identifier, obviating the need to store a local
mapping between the local identifier of the Resource and the
identifier used by the Service Provider. Each Resource MAY include a
non-empty externalId value. The value of the externalId attribute is
always issued by the Service Consumer and can never be specified by
the Service Provider. The Service Provider MUST always interpret the
externalId as scoped to the Service Consumer’s tenant.

**SCIM++ Properties:**  - caseExact: false  - multiValued: false  -
mutability: readWrite  - required: false  - returned: default  - type:
string  - uniqueness: none

--force

Perform update without prompting for confirmation.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--idcs-attribute-cacheable [boolean]

Specifies whether the attribute is cacheable. True by default for all
attributes. If attribute with idcsAttributeCachable = false, is
present “attributesToGet” while executing GET/SEARCH on cacheable
resource, Cache is missed and data is fetched from Data Provider.

**Added In:** 17.3.4

**SCIM++ Properties:**  - multiValued: false  - mutability: readWrite
- required: false  - returned: default  - type: boolean

--idcs-maps-to-same-target-attribute-name-as [text]

Contains the canonical name of the other attribute sharing the same
idcsTargetAttributeName

**Added In:** 2209122038

**SCIM++ Properties:**  - caseExact: false  - idcsSearchable: false  -
multiValued: false  - mutability: readWrite  - required: false  -
returned: always  - type: string  - uniqueness: none

--idcs-override-common-attribute [boolean]

Specifies whether the dataprovider mapping from resource schema should
override from common schema with the same name.

**Added In:** 2102181953

**SCIM++ Properties:**  - multiValued: false  - mutability: readWrite
- required: false  - returned: default  - type: boolean

--idcs-resource-types [complex type]

Resource types defs this resource refers to

**SCIM++ Properties:**  - caseExact: false  - multiValued: true  -
mutability: readWrite  - required: false  - returned: default  - type:
string  - uniqueness: none This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--if-match [text]

Used to make the request conditional on an ETag

--name [text]

Schema’s human-readable name

**SCIM++ Properties:**  - caseExact: false  - multiValued: false  -
mutability: readWrite  - required: false  - returned: default  - type:
string  - uniqueness: none

--resource-type-schema-version [text]

An endpoint-specific schema version number to use in the Request.
Allowed version values are Earliest Version or Latest Version as
specified in each REST API endpoint description, or any sequential
number inbetween. All schema attributes/body parameters are a part of
version 1. After version 1, any attributes added or deprecated will be
tagged with the version that they were added to or deprecated in. If
no version is provided, the latest schema version is returned.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci identity-domains schema put --generate-param-json-input schemas > schemas.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export idcs_mappable=<substitute-value-of-idcs_mappable> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/identity-domains/schema/put.html#cmdoption-idcs-mappable
       export schema_id=<substitute-value-of-schema_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/identity-domains/schema/put.html#cmdoption-schema-id

       oci identity-domains schema put --idcs-mappable $idcs_mappable --schema-id $schema_id --schemas file://schemas.json
